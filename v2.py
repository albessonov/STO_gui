# -*- coding: utf-8 -*-
import time

# Form implementation generated from reading ui file 'avtovaz.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from EDR_read import *
from PyQt5 import QtCore, QtGui, QtWidgets

import STO_tests_V2_nanopb_pb2 as Messages
from PyQt5 import QtSerialPort
import serial
import threading
import multiprocessing
from states import *
from serial.tools import list_ports
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        ports = serial.tools.list_ports.comports()
        print(ports)
        for port in ports:
            print(port.device)
        self.COM_PORT='COM1'
        self.UART = serial.Serial(self.COM_PORT, 115200)
        self.UART.close()
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1313, 997)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1311, 1021))
        self.tabWidget.setObjectName("tabWidget")
        self.init_tab = QtWidgets.QWidget()
        self.init_tab.setObjectName("init_tab")
        self.groupBox_2 = QtWidgets.QGroupBox(self.init_tab)
        self.groupBox_2.setGeometry(QtCore.QRect(-10, 0, 1321, 271))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.Run_Init_btn = QtWidgets.QPushButton(self.groupBox_2)
        self.Run_Init_btn.setGeometry(QtCore.QRect(660, 40, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Run_Init_btn.setFont(font)
        self.Run_Init_btn.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.Run_Init_btn.setObjectName("Run_Init_btn")
        self.inittime_brs = QtWidgets.QTextBrowser(self.groupBox_2)
        self.inittime_brs.setGeometry(QtCore.QRect(660, 90, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.inittime_brs.setFont(font)
        self.inittime_brs.setObjectName("inittime_brs")
        self.initresult_brs = QtWidgets.QTextBrowser(self.groupBox_2)
        self.initresult_brs.setGeometry(QtCore.QRect(660, 150, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.initresult_brs.setFont(font)
        self.initresult_brs.setObjectName("initresult_brs")
        self.Inittime_lbl = QtWidgets.QLabel(self.groupBox_2)
        self.Inittime_lbl.setGeometry(QtCore.QRect(40, 90, 441, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        self.Inittime_lbl.setFont(font)
        self.Inittime_lbl.setTextFormat(QtCore.Qt.AutoText)
        self.Inittime_lbl.setObjectName("Inittime_lbl")
        self.Initreuult_lbl = QtWidgets.QLabel(self.groupBox_2)
        self.Initreuult_lbl.setGeometry(QtCore.QRect(40, 150, 291, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        self.Initreuult_lbl.setFont(font)
        self.Initreuult_lbl.setObjectName("Initreuult_lbl")
        self.STOP_BTN_3 = QtWidgets.QPushButton(self.groupBox_2)
        self.STOP_BTN_3.setGeometry(QtCore.QRect(990, 40, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.STOP_BTN_3.setFont(font)
        self.STOP_BTN_3.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.STOP_BTN_3.setObjectName("STOP_BTN_3")
        self.can_msg_brs = QtWidgets.QTextBrowser(self.init_tab)
        self.can_msg_brs.setGeometry(QtCore.QRect(100, 340, 1051, 261))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.can_msg_brs.setFont(font)
        self.can_msg_brs.setObjectName("can_msg_brs")
        self.can_msg_lbl = QtWidgets.QLabel(self.init_tab)
        self.can_msg_lbl.setGeometry(QtCore.QRect(100, 300, 421, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.can_msg_lbl.setFont(font)
        self.can_msg_lbl.setObjectName("can_msg_lbl")
        self.tabWidget.addTab(self.init_tab, "")
        self.can_tab = QtWidgets.QWidget()
        self.can_tab.setObjectName("can_tab")
        self.groupBox_3 = QtWidgets.QGroupBox(self.can_tab)
        self.groupBox_3.setGeometry(QtCore.QRect(0, 0, 1311, 431))
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.perod_periodic_btn = QtWidgets.QPushButton(self.groupBox_3)
        self.perod_periodic_btn.setGeometry(QtCore.QRect(680, 80, 261, 51)) #
        font = QtGui.QFont()
        font.setPointSize(12)
        self.perod_periodic_btn.setFont(font)
        self.perod_periodic_btn.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.perod_periodic_btn.setObjectName("perod_periodic_btn")
        self.measured_period_brs = QtWidgets.QTextBrowser(self.groupBox_3)
        self.measured_period_brs.setGeometry(QtCore.QRect(860, 190, 256, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.measured_period_brs.setFont(font)
        self.measured_period_brs.setObjectName("measured_period_brs")
        self.result_periodic_brs = QtWidgets.QTextBrowser(self.groupBox_3)
        self.result_periodic_brs.setGeometry(QtCore.QRect(860, 330, 256, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.result_periodic_brs.setFont(font)
        self.result_periodic_brs.setObjectName("result_periodic_brs")
        self.period_peciodic_title = QtWidgets.QLabel(self.groupBox_3)
        self.period_peciodic_title.setGeometry(QtCore.QRect(270, 20, 731, 31))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(18)
        self.period_peciodic_title.setFont(font)
        self.period_peciodic_title.setObjectName("period_peciodic_title")
        self.accepted_periodic_brs = QtWidgets.QTextBrowser(self.groupBox_3)
        self.accepted_periodic_brs.setGeometry(QtCore.QRect(10, 140, 611, 231))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.accepted_periodic_brs.setFont(font)
        self.accepted_periodic_brs.setObjectName("accepted_periodic_brs")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(860, 155, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(860, 290, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_3)
        self.label_7.setGeometry(QtCore.QRect(20, 90, 361, 41))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")#
        self.STOP_BTN_1 = QtWidgets.QPushButton(self.groupBox_3)
        self.STOP_BTN_1.setGeometry(QtCore.QRect(1000, 80, 261, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.STOP_BTN_1.setFont(font)
        self.STOP_BTN_1.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.STOP_BTN_1.setObjectName("STOP_BTN_1")
        self.groupBox_4 = QtWidgets.QGroupBox(self.can_tab)
        self.groupBox_4.setGeometry(QtCore.QRect(0, 430, 1311, 521))
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.start_trig_btn = QtWidgets.QPushButton(self.groupBox_4)
        self.start_trig_btn.setGeometry(QtCore.QRect(690, 90, 251, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.start_trig_btn.setFont(font)
        self.start_trig_btn.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.start_trig_btn.setObjectName("start_trig_btn")
        self.measured_trig_brs = QtWidgets.QTextBrowser(self.groupBox_4)
        self.measured_trig_brs.setGeometry(QtCore.QRect(860, 210, 256, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.measured_trig_brs.setFont(font)
        self.measured_trig_brs.setObjectName("measured_trig_brs")
        self.result_trig_brs = QtWidgets.QTextBrowser(self.groupBox_4)
        self.result_trig_brs.setGeometry(QtCore.QRect(860, 360, 256, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.result_trig_brs.setFont(font)
        self.result_trig_brs.setObjectName("result_trig_brs")
        self.period_trig_title = QtWidgets.QLabel(self.groupBox_4)
        self.period_trig_title.setGeometry(QtCore.QRect(230, 20, 911, 31))
        font = QtGui.QFont()
        font.setFamily("Franklin Gothic Medium")
        font.setPointSize(18)
        font.setBold(False)
        font.setWeight(50)
        self.period_trig_title.setFont(font)
        self.period_trig_title.setObjectName("period_trig_title")
        self.accepted_trig_brs = QtWidgets.QTextBrowser(self.groupBox_4)
        self.accepted_trig_brs.setGeometry(QtCore.QRect(10, 160, 611, 241))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.accepted_trig_brs.setFont(font)
        self.accepted_trig_brs.setObjectName("accepted_trig_brs")
        self.measured_trig_lbl = QtWidgets.QLabel(self.groupBox_4)
        self.measured_trig_lbl.setGeometry(QtCore.QRect(860, 170, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.measured_trig_lbl.setFont(font)
        self.measured_trig_lbl.setObjectName("measured_trig_lbl")
        self.result_trig_lbl = QtWidgets.QLabel(self.groupBox_4)
        self.result_trig_lbl.setGeometry(QtCore.QRect(860, 320, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.result_trig_lbl.setFont(font)
        self.result_trig_lbl.setObjectName("result_trig_lbl")
        self.accepted_trig_lbl = QtWidgets.QLabel(self.groupBox_4)
        self.accepted_trig_lbl.setGeometry(QtCore.QRect(20, 120, 391, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.accepted_trig_lbl.setFont(font)
        self.accepted_trig_lbl.setObjectName("accepted_trig_lbl")
        self.STOP_BTN_2 = QtWidgets.QPushButton(self.groupBox_4)
        self.STOP_BTN_2.setGeometry(QtCore.QRect(1020, 90, 251, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.STOP_BTN_2.setFont(font)
        self.STOP_BTN_2.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.STOP_BTN_2.setObjectName("STOP_BTN_2")
        self.tabWidget.addTab(self.can_tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.groupBox = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox.setGeometry(QtCore.QRect(760, 0, 561, 291))
        self.groupBox.setObjectName("groupBox")
        self.AIRBAG_OFF_btn = QtWidgets.QRadioButton(self.groupBox)
        self.AIRBAG_OFF_btn.setGeometry(QtCore.QRect(10, 40, 381, 20))#
        font = QtGui.QFont()
        font.setPointSize(11)
        self.AIRBAG_OFF_btn.setFont(font)
        self.AIRBAG_OFF_btn.setObjectName("AIRBAG_OFF_btn")
        self.acc_selector = QtWidgets.QComboBox(self.groupBox)
        self.acc_selector.setGeometry(QtCore.QRect(30, 120, 500, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.acc_selector.setFont(font)
        self.acc_selector.setObjectName("acc_selector")
        self.acc_selector.addItem("Передний удар о жёсткий барьер скорость 50 км/ч 100% перекрытие")
        self.acc_selector.addItem("Передний удар об упругий барьер скорость 64 км/ч 40% перекрытие")
        self.acc_selector.addItem("Передний удар об упругий барьер скорость 56 км/ч 40% перекрытие")
        self.acc_selector.addItem("Передний удар о жёсткий барьер скорость 15 км/ч 40% перекрытие")
        self.acc_selector.addItem("Задний удар о жёсткий барьер 100% перекрытие")
        self.acc_selector.addItem("Боковой удар об упругий барьер скорость 15 км/ч 100% перекрытие")
        self.acc_selector.addItem("Боковой удар об упругий барьер скорость 25 км/ч 100% перекрытие")
        self.acc_selector.addItem("Боковой удар об упругий барьер скорость 50 км/ч 100% перекрытие")
        self.acc_selector_lbl = QtWidgets.QLabel(self.groupBox)
        self.acc_selector_lbl.setGeometry(QtCore.QRect(30, 90, 271, 16))#
        font = QtGui.QFont()
        font.setPointSize(11)
        self.acc_selector_lbl.setFont(font)
        self.acc_selector_lbl.setObjectName("acc_selector_lbl")
        self.groupBox_5 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_5.setGeometry(QtCore.QRect(0, 0, 760, 291))
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.start_acc_btn = QtWidgets.QPushButton(self.groupBox_5)
        self.start_acc_btn.setGeometry(QtCore.QRect(30, 20, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.start_acc_btn.setFont(font)
        self.start_acc_btn.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.start_acc_btn.setObjectName("start_acc_btn")
        self.exp_res_acc_brs = QtWidgets.QTextBrowser(self.groupBox_5)
        self.exp_res_acc_brs.setGeometry(QtCore.QRect(330, 80, 410, 50))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.exp_res_acc_brs.setFont(font)
        self.exp_res_acc_brs.setObjectName("exp_res_acc_brs")
        self.got_res_brs = QtWidgets.QTextBrowser(self.groupBox_5)
        self.got_res_brs.setGeometry(QtCore.QRect(330, 170, 410, 50))#
        font = QtGui.QFont()
        font.setPointSize(14)
        self.got_res_brs.setFont(font)
        self.got_res_brs.setObjectName("got_res_brs")
        self.expected_res_acc_lbl = QtWidgets.QLabel(self.groupBox_5)
        self.expected_res_acc_lbl.setGeometry(QtCore.QRect(50, 80, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.expected_res_acc_lbl.setFont(font)
        self.expected_res_acc_lbl.setObjectName("expected_res_acc_lbl")
        self.got_res_acc_lbl = QtWidgets.QLabel(self.groupBox_5)
        self.got_res_acc_lbl.setGeometry(QtCore.QRect(50, 170, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.got_res_acc_lbl.setFont(font)
        self.got_res_acc_lbl.setObjectName("got_res_acc_lbl")
        self.STOP_BTN_4 = QtWidgets.QPushButton(self.groupBox_5)
        self.STOP_BTN_4.setGeometry(QtCore.QRect(360, 20, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.STOP_BTN_4.setFont(font)
        self.STOP_BTN_4.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.STOP_BTN_4.setObjectName("STOP_BTN_4")
        self.CRASHDETECTED_BRS = QtWidgets.QTextBrowser(self.tab_2)
        self.CRASHDETECTED_BRS.setGeometry(QtCore.QRect(60, 410, 551, 171))
        self.CRASHDETECTED_BRS.setObjectName("CRASHDETECTED_BRS")
        self.CRASHDETECTED_BRS.setFont(font)
        self.label = QtWidgets.QLabel(self.tab_2)
        self.label.setGeometry(QtCore.QRect(70, 330, 431, 20))
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.tabWidget.addTab(self.tab_2, "")#
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.groupBox_11 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_11.setGeometry(QtCore.QRect(590, 0, 721, 951))
        self.groupBox_11.setTitle("")
        self.groupBox_11.setObjectName("groupBox_11")
        self.UDS_MSG_BRS = QtWidgets.QTextBrowser(self.groupBox_11)
        self.UDS_MSG_BRS.setGeometry(QtCore.QRect(50, 120, 521, 671))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.UDS_MSG_BRS.setFont(font)
        self.UDS_MSG_BRS.setObjectName("UDS_MSG_BRS")
        self.UDS_MSG_LBL = QtWidgets.QLabel(self.groupBox_11)
        self.UDS_MSG_LBL.setGeometry(QtCore.QRect(60, 80, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.UDS_MSG_LBL.setFont(font)
        self.UDS_MSG_LBL.setObjectName("UDS_MSG_LBL")
        self.groupBox_12 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_12.setGeometry(QtCore.QRect(0, 0, 591, 361))
        self.groupBox_12.setTitle("")
        self.groupBox_12.setObjectName("groupBox_12")#
        self.UDS_RUN_BTN = QtWidgets.QPushButton(self.groupBox_12)
        self.UDS_RUN_BTN.setGeometry(QtCore.QRect(50, 30, 441, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.UDS_RUN_BTN.setFont(font)
        self.UDS_RUN_BTN.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.UDS_RUN_BTN.setObjectName("UDS_RUN_BTN")
        self.UDS_TEST_SELECTOR = QtWidgets.QComboBox(self.groupBox_12)
        self.UDS_TEST_SELECTOR.setGeometry(QtCore.QRect(50, 180, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.UDS_TEST_SELECTOR.setFont(font)
        self.UDS_TEST_SELECTOR.setObjectName("UDS_TEST_SELECTOR")
        self.UDS_TEST_SELECTOR.addItem("Проверка ECU reset 0x11")
        self.UDS_TEST_SELECTOR.addItem("Проверка InputOutputControlByIdentifier 0x2F")
        self.UDS_TEST_SELECTOR.addItem("Проверка Tester Present 0x3E")
        self.UDS_TEST_SELECTOR.addItem("Проверка CommunicationControl 0x28 disable tx")
        self.UDS_TEST_SELECTOR.addItem("Проверка CommunicationControl 0x28 disable tx,rx")
        self.UDS_TEST_SELECTOR.addItem("Проверка ClearDiagnosticInformation 0x14")
        self.UDS_TEST_SELECTOR.addItem("Проверка ReadDiagnosticInformation 0x19 - 0x0A ReportSupportedDTC")
        self.UDS_TEST_SELECTOR.addItem("Проверка ControlDTCSetting 0x85")
        self.UDS_TEST_SELECTOR.addItem("Проверка SecurityAccess 0x27")
        self.UDS_TEST_SELECTOR.addItem("Проверка записи DID ECU Operating States")
        self.UDS_TEST_SELECTOR.addItem("Проверка записи DID ACU configuration")
        self.UDS_TEST_SELECTOR.addItem("Проверка чтения Driver Airbag Resistance")
        self.UDS_TEST_SELECTOR.addItem("Проверка чтения PAB Deactivation Indicator Status")
        self.UDS_TEST_SELECTOR.addItem("Проверка чтения Vehicle speed")
        self.UDS_TEST_SELECTOR.addItem("Проверка чтения Battery Voltage")
        self.UDS_TEST_SELECTOR.addItem("Проверка чтения ECU's lifetime timer")
        self.UDS_TEST_SELECTOR.addItem("Проверка чтения Occupant Input")
        self.UDS_LED_SELECTOR = QtWidgets.QComboBox(self.groupBox_12)
        self.UDS_LED_SELECTOR.setGeometry(QtCore.QRect(50, 250, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.UDS_LED_SELECTOR.setFont(font)
        self.UDS_LED_SELECTOR.setObjectName("UDS_TEST_SELECTOR")
        self.UDS_LED_SELECTOR.addItem("Отключение диагностического светодиода")
        self.UDS_LED_SELECTOR.addItem("Включение диагностического светодиода")
        self.UDS_LED_SELECTOR.addItem("Включение светодиода отключения ПБ")
        self.UDS_LED_SELECTOR.addItem("Отключение светодиода отключения ПБ")
        self.UDS_LED_SELECTOR.setDisabled(1)
        self.UDS_TEST_LBL = QtWidgets.QLabel(self.groupBox_12)
        self.UDS_TEST_LBL = QtWidgets.QLabel(self.groupBox_12)
        self.UDS_TEST_LBL.setGeometry(QtCore.QRect(150, 140, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.UDS_TEST_LBL.setFont(font)#
        self.UDS_TEST_LBL.setObjectName("UDS_TEST_LBL")
        self.STOP_BTN_6 = QtWidgets.QPushButton(self.groupBox_12)
        self.STOP_BTN_6.setGeometry(QtCore.QRect(50, 90, 441, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.STOP_BTN_6.setFont(font)
        self.STOP_BTN_6.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.STOP_BTN_6.setObjectName("STOP_BTN_6")
        self.EXP_UDS_BRS = QtWidgets.QTextBrowser(self.tab_3)
        self.EXP_UDS_BRS.setGeometry(QtCore.QRect(20, 460, 541, 331))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.EXP_UDS_BRS.setFont(font)
        self.EXP_UDS_BRS.setObjectName("EXP_UDS_BRS")
        self.EXP_UDS_LBL = QtWidgets.QLabel(self.tab_3)
        self.EXP_UDS_LBL.setGeometry(QtCore.QRect(20, 410, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.EXP_UDS_LBL.setFont(font)
        self.EXP_UDS_LBL.setObjectName("EXP_UDS_LBL")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.groupBox_6 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_6.setGeometry(QtCore.QRect(0, 0, 511, 961))
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.start_SBR_btn = QtWidgets.QPushButton(self.groupBox_6)
        self.start_SBR_btn.setGeometry(QtCore.QRect(20, 210, 421, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.start_SBR_btn.setFont(font)
        self.start_SBR_btn.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.start_SBR_btn.setObjectName("start_SBR_btn")
        self.SBR_test_selector = QtWidgets.QComboBox(self.groupBox_6)
        self.SBR_test_selector.setGeometry(QtCore.QRect(10, 310, 481, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.SBR_test_selector.setFont(font)
        self.SBR_test_selector.setObjectName("SBR_test_selector")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.sbr_test_sel_lbl = QtWidgets.QLabel(self.groupBox_6)
        self.sbr_test_sel_lbl.setGeometry(QtCore.QRect(130, 280, 201, 20))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.sbr_test_sel_lbl.setFont(font)
        self.sbr_test_sel_lbl.setObjectName("sbr_test_sel_lbl")
        self.exp_res_SBR_brs = QtWidgets.QTextBrowser(self.groupBox_6)
        self.exp_res_SBR_brs.setGeometry(QtCore.QRect(10, 470, 461, 161))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.exp_res_SBR_brs.setFont(font)
        self.exp_res_SBR_brs.setObjectName("exp_res_SBR_brs")
        self.got_res_SBR_brs = QtWidgets.QTextBrowser(self.groupBox_6)
        self.got_res_SBR_brs.setGeometry(QtCore.QRect(10, 720, 461, 171))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.got_res_SBR_brs.setFont(font)
        self.got_res_SBR_brs.setObjectName("got_res_SBR_brs")
        self.exp_res_SBR_lbl = QtWidgets.QLabel(self.groupBox_6)
        self.exp_res_SBR_lbl.setGeometry(QtCore.QRect(20, 430, 251, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.exp_res_SBR_lbl.setFont(font)
        self.exp_res_SBR_lbl.setObjectName("exp_res_SBR_lbl")
        self.got_res_SBR_lbl = QtWidgets.QLabel(self.groupBox_6)
        self.got_res_SBR_lbl.setGeometry(QtCore.QRect(20, 670, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.got_res_SBR_lbl.setFont(font)
        self.got_res_SBR_lbl.setObjectName("got_res_SBR_lbl")
        self.groupBox_7 = QtWidgets.QGroupBox(self.groupBox_6)
        self.groupBox_7.setGeometry(QtCore.QRect(0, -20, 511, 211))
        self.groupBox_7.setObjectName("groupBox_7")
        self.Seatbelt_selector = QtWidgets.QComboBox(self.groupBox_7)
        self.Seatbelt_selector.setGeometry(QtCore.QRect(20, 80, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.Seatbelt_selector.setFont(font)
        self.Seatbelt_selector.setObjectName("Seatbelt_selector")
        self.Seatbelt_selector.addItem("")
        self.Seatbelt_selector.addItem("")
        self.Seatbelt_selector.addItem("")
        self.Seatbelt_selector.addItem("")
        self.Seatbelt_selector.addItem("")

        font = QtGui.QFont()
        font.setPointSize(11)

        self.SB_select_lbl = QtWidgets.QLabel(self.groupBox_7)
        self.SB_select_lbl.setGeometry(QtCore.QRect(20, 50, 241, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.SB_select_lbl.setFont(font)
        self.SB_select_lbl.setObjectName("SB_select_lbl")
        self.Door_select_lbl = QtWidgets.QLabel(self.groupBox_7)
        self.Door_select_lbl.setGeometry(QtCore.QRect(290, 50, 131, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Door_select_lbl.setFont(font)
        self.Door_select_lbl.setObjectName("Door_select_lbl")
        self.STOP_BTN_5 = QtWidgets.QPushButton(self.groupBox_6)
        self.STOP_BTN_5.setGeometry(QtCore.QRect(20, 260, 421, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.STOP_BTN_5.setFont(font)
        self.STOP_BTN_5.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.STOP_BTN_5.setObjectName("STOP_BTN_5")
        self.acc_SBR_brs = QtWidgets.QTextBrowser(self.tab_6)
        self.acc_SBR_brs.setGeometry(QtCore.QRect(600, 240, 601, 581))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.acc_SBR_brs.setFont(font)
        self.acc_SBR_brs.setObjectName("acc_SBR_brs")
        self.accepted_SBR_title = QtWidgets.QLabel(self.tab_6)
        self.accepted_SBR_title.setGeometry(QtCore.QRect(610, 200, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.accepted_SBR_title.setFont(font)
        self.accepted_SBR_title.setObjectName("accepted_SBR_title")
        self.tabWidget.addTab(self.tab_6, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox_8 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_8.setGeometry(QtCore.QRect(520, 230, 791, 741))
        self.groupBox_8.setTitle("")
        self.groupBox_8.setObjectName("groupBox_8")
        self.DIAG_READ_0x09_BTN = QtWidgets.QPushButton(self.groupBox_8)
        self.DIAG_READ_0x09_BTN.setGeometry(QtCore.QRect(60, 90, 211, 51))
        self.DIAG_READ_0x09_BTN.setObjectName("DIAG_READ_0x09_BTN")
        self.DIAG_CLEAR_DTC_BTN = QtWidgets.QPushButton(self.groupBox_8)
        self.DIAG_CLEAR_DTC_BTN.setGeometry(QtCore.QRect(540, 90, 211, 51))
        self.DIAG_CLEAR_DTC_BTN.setObjectName("DIAG_CLEAR_DTC_BTN")
        self.DIAG_ERRORS_BRS = QtWidgets.QTextBrowser(self.groupBox_8)
        self.DIAG_ERRORS_BRS.setGeometry(QtCore.QRect(50, 280, 681, 281))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.DIAG_ERRORS_BRS.setFont(font)
        self.DIAG_ERRORS_BRS.setObjectName("DIAG_ERRORS_BRS")
        self.DIAG_ERRORS_LBL = QtWidgets.QLabel(self.groupBox_8)
        self.DIAG_ERRORS_LBL.setGeometry(QtCore.QRect(60, 220, 321, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.DIAG_ERRORS_LBL.setFont(font)
        self.DIAG_ERRORS_LBL.setObjectName("DIAG_ERRORS_LBL")
        self.DIAG_READ_0x08_BTN = QtWidgets.QPushButton(self.groupBox_8)
        self.DIAG_READ_0x08_BTN.setGeometry(QtCore.QRect(300, 90, 211, 51))
        self.DIAG_READ_0x08_BTN.setObjectName("DIAG_READ_0x08_BTN")
        self.groupBox_9 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_9.setGeometry(QtCore.QRect(520, 0, 781, 231))
        self.groupBox_9.setTitle("")
        self.groupBox_9.setObjectName("groupBox_9")
        self.DIAG_RESET_BTN = QtWidgets.QPushButton(self.groupBox_9)
        self.DIAG_RESET_BTN.setGeometry(QtCore.QRect(400, 100, 261, 51))
        self.DIAG_RESET_BTN.setObjectName("DIAG_RESET_BTN")
        self.DIAG_VIN0_BTN = QtWidgets.QPushButton(self.groupBox_9)
        self.DIAG_VIN0_BTN.setGeometry(QtCore.QRect(70, 100, 261, 51))
        self.DIAG_VIN0_BTN.setObjectName("DIAG_VIN0_BTN")
        self.DIAG_VIN1_BTN = QtWidgets.QPushButton(self.groupBox_9)
        self.DIAG_VIN1_BTN.setGeometry(QtCore.QRect(70, 40, 261, 51))
        self.DIAG_VIN1_BTN.setObjectName("DIAG_VIN1_BTN")
        self.DIAG_EXTDIAG_BTN = QtWidgets.QPushButton(self.groupBox_9)
        self.DIAG_EXTDIAG_BTN.setGeometry(QtCore.QRect(400, 160, 261, 51))
        self.DIAG_EXTDIAG_BTN.setObjectName("DIAG_EXTDIAG_BTN")
        self.DIAG_ACC_BTN = QtWidgets.QPushButton(self.groupBox_9)
        self.DIAG_ACC_BTN.setGeometry(QtCore.QRect(400, 40, 261, 51))
        self.DIAG_ACC_BTN.setObjectName("DIAG_ACC_BTN")
        self.groupBox_10 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_10.setGeometry(QtCore.QRect(0, 0, 521, 441))
        self.groupBox_10.setTitle("")
        self.groupBox_10.setObjectName("groupBox_10")
        self.DIAG_UPD_CAN_MSG_BTN = QtWidgets.QPushButton(self.groupBox_10)
        self.DIAG_UPD_CAN_MSG_BTN.setGeometry(QtCore.QRect(70, 70, 321, 41))
        self.DIAG_UPD_CAN_MSG_BTN.setObjectName("DIAG_UPD_CAN_MSG_BTN")
        self.DIAG_CAN_MSG_LBL = QtWidgets.QLabel(self.groupBox_10)
        self.DIAG_CAN_MSG_LBL.setGeometry(QtCore.QRect(70, 20, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.DIAG_CAN_MSG_LBL.setFont(font)
        self.DIAG_CAN_MSG_LBL.setObjectName("DIAG_CAN_MSG_LBL")
        self.DIAG_0x5D7_CHECK = QtWidgets.QCheckBox(self.groupBox_10)
        self.DIAG_0x5D7_CHECK.setGeometry(QtCore.QRect(120, 140, 211, 17))
        self.DIAG_0x5D7_CHECK.setObjectName("DIAG_0x5D7_CHECK")
        self.DIAG_0x350_CHECK = QtWidgets.QCheckBox(self.groupBox_10)
        self.DIAG_0x350_CHECK.setGeometry(QtCore.QRect(120, 190, 201, 17))
        self.DIAG_0x350_CHECK.setObjectName("DIAG_0x350_CHECK")
        self.DIAG_0x4F8_CHECK = QtWidgets.QCheckBox(self.groupBox_10)
        self.DIAG_0x4F8_CHECK.setGeometry(QtCore.QRect(120, 240, 241, 17))
        self.DIAG_0x4F8_CHECK.setObjectName("DIAG_0x4F8_CHECK")
        self.DIAG_SPEED_SELECTOR = QtWidgets.QComboBox(self.groupBox_10)
        self.DIAG_SPEED_SELECTOR.setGeometry(QtCore.QRect(50, 320, 101, 22))
        self.DIAG_SPEED_SELECTOR.setObjectName("DIAG_SPEED_SELECTOR")
        self.DIAG_SPEED_SELECTOR.addItem("")
        self.DIAG_SPEED_SELECTOR.addItem("")
        self.DIAG_DIAGENABLE_SELECTOR = QtWidgets.QComboBox(self.groupBox_10)
        self.DIAG_DIAGENABLE_SELECTOR.setGeometry(QtCore.QRect(320, 320, 91, 22))
        self.DIAG_DIAGENABLE_SELECTOR.setObjectName("DIAG_DIAGENABLE_SELECTOR")
        self.DIAG_DIAGENABLE_SELECTOR.addItem("")
        self.DIAG_DIAGENABLE_SELECTOR.addItem("")
        self.DIAG_DIAGENABLE_SELECTOR.addItem("")
        self.DIAG_DIAGENABLE_SELECTOR.addItem("")
        self.DIAG_SPEED_SELECTOR_2 = QtWidgets.QLabel(self.groupBox_10)
        self.DIAG_SPEED_SELECTOR_2.setGeometry(QtCore.QRect(10, 295, 191, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DIAG_SPEED_SELECTOR_2.setFont(font)
        self.DIAG_SPEED_SELECTOR_2.setObjectName("DIAG_SPEED_SELECTOR_2")
        self.DIAG_DIAGENABLE_SELECTOR_2 = QtWidgets.QLabel(self.groupBox_10)
        self.DIAG_DIAGENABLE_SELECTOR_2.setGeometry(QtCore.QRect(220, 296, 281, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.DIAG_DIAGENABLE_SELECTOR_2.setFont(font)
        self.DIAG_DIAGENABLE_SELECTOR_2.setObjectName("DIAG_DIAGENABLE_SELECTOR_2")
        self.DIAG_ACCEPTED_BRS = QtWidgets.QTextBrowser(self.tab)
        self.DIAG_ACCEPTED_BRS.setGeometry(QtCore.QRect(30, 510, 441, 391))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.DIAG_ACCEPTED_BRS.setFont(font)
        self.DIAG_ACCEPTED_BRS.setObjectName("DIAG_ACCEPTED_BRS")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(100, 470, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.tabWidget.addTab(self.tab, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.EDR_READ_BTN = QtWidgets.QPushButton(self.tab_4)
        self.EDR_READ_BTN.setGeometry(QtCore.QRect(50, 40, 561, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.EDR_READ_BTN.setFont(font)
        self.EDR_READ_BTN.setObjectName("EDR_READ_BTN")
        self.EDR_READ_BRS = QtWidgets.QTextBrowser(self.tab_4)
        self.EDR_READ_BRS.setGeometry(QtCore.QRect(20, 190, 1261, 761))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.EDR_READ_BRS.setFont(font)
        self.EDR_READ_BRS.setObjectName("EDR_READ_BRS")
        self.label_3 = QtWidgets.QLabel(self.tab_4)
        self.label_3.setGeometry(QtCore.QRect(30, 140, 331, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.STOP_BTN_7 = QtWidgets.QPushButton(self.tab_4)
        self.STOP_BTN_7.setGeometry(QtCore.QRect(640, 40, 561, 61))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.STOP_BTN_7.setFont(font)
        self.STOP_BTN_7.setObjectName("STOP_BTN_7")
        self.tabWidget.addTab(self.tab_4, "")
        MainWindow.setCentralWidget(self.centralwidget)


        self.retranslateUi(MainWindow)

        self.tabWidget.setCurrentIndex(0)
        self.Run_Init_btn.clicked.connect(self.run_test1)
        self.Run_Init_btn.clicked.connect(self.inittime_brs.clear)
        self.Run_Init_btn.clicked.connect(self.initresult_brs.clear)
        self.Run_Init_btn.clicked.connect(self.can_msg_brs.clear)

        self.perod_periodic_btn.clicked.connect(self.run_test2)
        self.perod_periodic_btn.clicked.connect(self.accepted_periodic_brs.clear)
        self.perod_periodic_btn.clicked.connect(self.measured_period_brs.clear)
        self.perod_periodic_btn.clicked.connect(self.result_periodic_brs.clear)


        self.start_trig_btn.clicked.connect(self.run_test3_period)
        self.start_trig_btn.clicked.connect(self.accepted_trig_brs.clear)
        self.start_trig_btn.clicked.connect(self.measured_trig_brs.clear)
        self.start_trig_btn.clicked.connect(self.result_trig_brs.clear)


        self.start_acc_btn.clicked.connect(self.run_accelerometer)
        self.start_acc_btn.clicked.connect(self.got_res_brs.clear)
        self.start_acc_btn.clicked.connect(self.CRASHDETECTED_BRS.clear)

        self.UDS_RUN_BTN.clicked.connect(self.run_UDS)
        self.UDS_RUN_BTN.clicked.connect(self.UDS_MSG_BRS.clear)

        self.UDS_TEST_SELECTOR.currentIndexChanged['int'].connect(self.UDS_test_changed)
        self.UDS_TEST_SELECTOR.currentIndexChanged['int'].connect(self.UDS_MSG_BRS.clear)

        self.UDS_LED_SELECTOR.currentIndexChanged['int'].connect(self.UDS_LED_changed)
        self.UDS_LED_SELECTOR.currentIndexChanged['int'].connect(self.UDS_MSG_BRS.clear)

        self.start_SBR_btn.clicked.connect(self.run_SBR)
        self.start_SBR_btn.clicked.connect(self.acc_SBR_brs.clear)
        self.start_SBR_btn.clicked.connect(self.got_res_SBR_brs.clear)

        self.acc_selector.currentIndexChanged['int'].connect(self.acc_set_changed) # type: ignore
        self.SBR_test_selector.currentIndexChanged['int'].connect(self.SBR_test_changed) # type: ignore

        self.DIAG_RESET_BTN.clicked.connect(self.run_ECU_reset)
        self.DIAG_RESET_BTN.clicked.connect(self.DIAG_ACCEPTED_BRS.clear)

        self.DIAG_EXTDIAG_BTN.clicked.connect(self.run_ExtendedDiagnostic)
        self.DIAG_EXTDIAG_BTN.clicked.connect(self.DIAG_ACCEPTED_BRS.clear)

        self.DIAG_VIN0_BTN.clicked.connect(self.run_Write_VIN0)
        self.DIAG_VIN0_BTN.clicked.connect(self.DIAG_ACCEPTED_BRS.clear)

        self.DIAG_VIN1_BTN.clicked.connect(self.run_Write_VIN1)
        self.DIAG_VIN1_BTN.clicked.connect(self.DIAG_ACCEPTED_BRS.clear)

        self.DIAG_READ_0x08_BTN.clicked.connect(self.run_Read0x08)
        self.DIAG_READ_0x08_BTN.clicked.connect(self.DIAG_ERRORS_BRS.clear)

        self.DIAG_READ_0x09_BTN.clicked.connect(self.run_Read0x09)
        self.DIAG_READ_0x09_BTN.clicked.connect(self.DIAG_ERRORS_BRS.clear)

        self.DIAG_CLEAR_DTC_BTN.clicked.connect(self.run_ClearDTC)
        self.DIAG_CLEAR_DTC_BTN.clicked.connect(self.DIAG_ERRORS_BRS.clear)

        self.DIAG_ACC_BTN.clicked.connect(self.run_Emulate_crash)
        self.DIAG_ACC_BTN.clicked.connect(self.DIAG_ACCEPTED_BRS.clear)

        self.DIAG_UPD_CAN_MSG_BTN.clicked.connect(self.Send_periodic)

        self.EDR_READ_BTN.clicked.connect(self.run_EDR_read)
        self.EDR_READ_BTN.clicked.connect(self.EDR_READ_BRS.clear)

        self.STOP_BTN_1.clicked.connect(self.close)
        self.STOP_BTN_2.clicked.connect(self.close)
        self.STOP_BTN_3.clicked.connect(self.close)
        self.STOP_BTN_4.clicked.connect(self.close)
        self.STOP_BTN_5.clicked.connect(self.close)
        self.STOP_BTN_6.clicked.connect(self.close)
        self.STOP_BTN_7.clicked.connect(self.close)





        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "СТО СНБП АВТОВАЗ"))
        self.Run_Init_btn.setText(_translate("MainWindow", "Старт"))
        self.Inittime_lbl.setText(_translate("MainWindow", "Измеренное время инциализации"))
        self.Initreuult_lbl.setText(_translate("MainWindow", "Результат проверки"))
        self.can_msg_lbl.setText(_translate("MainWindow", "Принятые сообщения CAN"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.init_tab),_translate("MainWindow", "Проверка инициализации"))
        self.perod_periodic_btn.setText(_translate("MainWindow", "Старт"))
        self.period_peciodic_title.setText(_translate("MainWindow", "Измерение периода периодических CAN-сообщений"))
        self.label_5.setText(_translate("MainWindow", "Измеренный период"))
        self.label_6.setText(_translate("MainWindow", "Результат"))
        self.label_7.setText(_translate("MainWindow", "Принятые CAN-сообщения"))
        self.start_trig_btn.setText(_translate("MainWindow", "Старт"))
        self.period_trig_title.setText(_translate("MainWindow", "Измерение периода CAN-сообщений при срабатывании системы"))
        self.measured_trig_lbl.setText(_translate("MainWindow", "Измеренный период"))
        self.result_trig_lbl.setText(_translate("MainWindow", "Результат"))
        self.accepted_trig_lbl.setText(_translate("MainWindow", "Принятые CAN-сообщения"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.can_tab),
                                  _translate("MainWindow", "Проверка периода CAN"))
        self.groupBox.setTitle(_translate("MainWindow", "Параметры испытания"))
        self.AIRBAG_OFF_btn.setText(_translate("MainWindow", "Отключить ПБ переднего пассажира"))
        self.acc_selector_lbl.setText(_translate("MainWindow", "Выбор набора ускорений"))
        self.start_acc_btn.setText(_translate("MainWindow", "Старт"))
        self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=30 мс")
        self.expected_res_acc_lbl.setText(_translate("MainWindow", "Ожидаемый результат"))
        self.got_res_acc_lbl.setText(_translate("MainWindow", "Полученный результат"))
        self.label.setText(_translate("MainWindow", "Отслеживание сигнала CrashDetected"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Проверка срабатывания системы"))
        self.UDS_MSG_LBL.setText(_translate("MainWindow", "Ход проверки"))
        self.UDS_RUN_BTN.setText(_translate("MainWindow", "Старт"))
        self.UDS_TEST_LBL.setText(_translate("MainWindow", "Запускаемый тест"))
        self.EXP_UDS_LBL.setText(_translate("MainWindow", "Ожидаемый ход проверки"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Проверка системы UDS"))
        self.start_SBR_btn.setText(_translate("MainWindow", "Старт"))
        self.SBR_test_selector.setItemText(0, _translate("MainWindow",
                                                         "Проверка корректности передачи состояний РБ по CAN шине"))
        self.SBR_test_selector.setItemText(1, _translate("MainWindow",
                                                         "Проверка активации системы при включении зажигания"))
        self.SBR_test_selector.setItemText(2, _translate("MainWindow",
                                                         "Проверка включения 1 уровня тревоги seat belt reminder"))
        self.SBR_test_selector.setItemText(3, _translate("MainWindow",
                                                         "Проверка включения 2 уровня тревоги seat belt reminder"))
        self.SBR_test_selector.setItemText(4, _translate("MainWindow",
                                                         "Проверка отключения сообщения о тревоге по таймауту"))
        self.SBR_test_selector.setItemText(5, _translate("MainWindow", "Проверка обнуления таймаута"))
        self.SBR_test_selector.setItemText(6,
                                           _translate("MainWindow", "Проверка отключения тревоги при открытии дверей"))
        self.sbr_test_sel_lbl.setText(_translate("MainWindow", "Запускаемый тест"))
        self.exp_res_SBR_lbl.setText(_translate("MainWindow", "Ожидаемый результат"))
        self.got_res_SBR_lbl.setText(_translate("MainWindow", "Полученный результат"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Параметры"))
        self.Seatbelt_selector.setItemText(0, _translate("MainWindow", "Водитель"))
        self.Seatbelt_selector.setItemText(1, _translate("MainWindow", "Передний пассажир"))
        self.Seatbelt_selector.setItemText(2, _translate("MainWindow", "Задний левый пассажир"))
        self.Seatbelt_selector.setItemText(3, _translate("MainWindow", "Центральный задний пассажир"))
        self.Seatbelt_selector.setItemText(4, _translate("MainWindow", "Правый задний пассажир"))

        self.SB_select_lbl.setText(_translate("MainWindow", "Селектор ремня безопасности"))

        self.accepted_SBR_title.setText(_translate("MainWindow", "Ход проверки"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("MainWindow", "Проверка SBR"))
        self.DIAG_READ_0x09_BTN.setText(_translate("MainWindow", "Считать DTC 0x09"))
        self.DIAG_CLEAR_DTC_BTN.setText(_translate("MainWindow", "Очистить DTC"))
        self.DIAG_ERRORS_LBL.setText(_translate("MainWindow", "Считанные ошибки"))
        self.DIAG_READ_0x08_BTN.setText(_translate("MainWindow", "Считать DTC 0x08"))
        self.DIAG_RESET_BTN.setText(_translate("MainWindow", "Перезапустить Блок"))
        self.DIAG_VIN0_BTN.setText(_translate("MainWindow", "Записать VIN!=0"))
        self.DIAG_VIN1_BTN.setText(_translate("MainWindow", "Записать VIN=0"))
        self.DIAG_EXTDIAG_BTN.setText(_translate("MainWindow", "Войти в ExtendedDiagnosticSession"))
        self.DIAG_ACC_BTN.setText(_translate("MainWindow", "Тест на срабатывание"))
        self.DIAG_UPD_CAN_MSG_BTN.setText(_translate("MainWindow", "Обновить"))
        self.DIAG_CAN_MSG_LBL.setText(_translate("MainWindow", "Отправляемые сообщения"))
        self.DIAG_0x5D7_CHECK.setText(_translate("MainWindow", "BRAKE_CANHS_R_01(0х5D7)"))
        self.DIAG_0x350_CHECK.setText(_translate("MainWindow", "BCM_CANHS_R_04(0x350)"))
        self.DIAG_0x4F8_CHECK.setText(_translate("MainWindow", "CLUSTER_CANHS_RNr_01(0x4F8)"))
        self.DIAG_SPEED_SELECTOR.setItemText(0, _translate("MainWindow", "15 км/ч"))
        self.DIAG_SPEED_SELECTOR.setItemText(1, _translate("MainWindow", "40 км/ч"))
        self.DIAG_DIAGENABLE_SELECTOR.setItemText(0, _translate("MainWindow", "0"))
        self.DIAG_DIAGENABLE_SELECTOR.setItemText(1, _translate("MainWindow", "1"))
        self.DIAG_DIAGENABLE_SELECTOR.setItemText(2, _translate("MainWindow", "2"))
        self.DIAG_DIAGENABLE_SELECTOR.setItemText(3, _translate("MainWindow", "3"))
        self.DIAG_SPEED_SELECTOR_2.setText(_translate("MainWindow", "Отправляемая скорость"))
        self.DIAG_DIAGENABLE_SELECTOR_2.setText(_translate("MainWindow", "Сигнал GenericApplicativeDiagEnable"))
        self.label_2.setText(_translate("MainWindow", "Принятые сообщения"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Проверка самодиагностки"))
        self.EDR_READ_BTN.setText(_translate("MainWindow", "Cтарт"))
        self.label_3.setText(_translate("MainWindow", "Считанные данные"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Проверка чтения EDR"))
        self.STOP_BTN_1.setText(_translate("MainWindow", "Стоп"))
        self.STOP_BTN_2.setText(_translate("MainWindow", "Стоп"))
        self.STOP_BTN_3.setText(_translate("MainWindow", "Стоп"))
        self.STOP_BTN_4.setText(_translate("MainWindow", "Стоп"))
        self.STOP_BTN_5.setText(_translate("MainWindow", "Стоп"))
        self.STOP_BTN_6.setText(_translate("MainWindow", "Стоп"))
        self.STOP_BTN_7.setText(_translate("MainWindow", "Стоп"))

    def acc_set_changed(self):
        if self.acc_selector.currentIndex() == 0:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=30 мс")
        elif self.acc_selector.currentIndex() == 1:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=35 мс")
        elif self.acc_selector.currentIndex() == 2:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=35 мс")
        elif self.acc_selector.currentIndex() == 3:
            self.exp_res_acc_brs.setText("СНПБ не срабатывает")
        elif self.acc_selector.currentIndex() == 4:
            self.exp_res_acc_brs.setText("СНПБ не срабатывает")
        elif self.acc_selector.currentIndex() == 5:
            self.exp_res_acc_brs.setText("СНПБ не срабатывает")
        elif self.acc_selector.currentIndex() == 6:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=22 мс")
        elif self.acc_selector.currentIndex() == 7:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=7 мс")
    def UDS_test_changed(self):
        if self.UDS_TEST_SELECTOR.currentIndex() == 0:
            self.EXP_UDS_BRS.setText("Отправлено: 02 11 01\nПринято: 02 51 01\nДиагностический светодиод моргает")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 1:
            self.EXP_UDS_BRS.setText("Отправлено: 05 2F 38 01 03 00\nПринято: 05 6F 38 01 03 00")
            self.UDS_LED_SELECTOR.setDisabled(0)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 2:
            self.EXP_UDS_BRS.setText("Отправлено: 02 3E 00\nПринято: 02 7E 00")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 3:
            self.EXP_UDS_BRS.setText("Отправлено: 03 28 01 01\nПринято: 03 68 01\nСообщения по CAN не принимаются\n\nОтправлено: 03 28 00 01\nПринято: 03 68 03\n Сообщения по CAN  принимаются")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 4:
            self.EXP_UDS_BRS.setText("Отправлено: 03 28 03 03\nПринято: 03 68 03\nСообщения по CAN не принимаются и не передаются")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 5:
            self.EXP_UDS_BRS.setText("Коды ошибок стёрлись")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 6:
            self.EXP_UDS_BRS.setText("На экране появились все поддерживаемые DTC и их состояния")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 7:
            self.EXP_UDS_BRS.setText("На экране появились все поддерживаемые DTC и их состояния")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 8:
            self.EXP_UDS_BRS.setText("Блок успешно вошёл в security access")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 9:
            self.EXP_UDS_BRS.setText("1) При первом чтении DID последний байт в отете 0х5А \nВизуально убедиться, что диагностический светодиод мигает с частотой 1 Гц\n2) При втором чтении DID последний байт ответа 0хА5\nВизуально убедиться, что диагностический светодиод не мигает")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 10:
            self.EXP_UDS_BRS.setText("1)При первом чтении DID последний байт в ответе 0хFF\n2)Импульс на пиропатроне водтеля не задетектирован\nПри втором чтении DID последний байт ответа 0хFF\nЗначение SafetyBeltState изменилось на not monitored")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 11:
            self.EXP_UDS_BRS.setText(f"Отправлено: 03 22 59 10\nПринято: 05 62 59 10 xx xx \nxx-Считанное сопротивление")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 12:
            self.EXP_UDS_BRS.setText(f"Отправлено: 03 22 59 18\nПринято: 04 62 59 10 xx \nxx-Состояние светодиода")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 13:
            self.EXP_UDS_BRS.setText(f"Отправлено: 03 22 C9 21\nПринято: 05 62 C9 21 xx xx\nxx xx-Считанное значение скорости\n Скорость 40км/ч")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 14:
            self.EXP_UDS_BRS.setText("Отправлено: 03 22 C9 53\nПринято: 04 62 C9 53 xx \nxx- Считанное напряжение")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 15:
            self.EXP_UDS_BRS.setText("Отправлено: 03 22 C9 14\nПринято: 07 62 C9 53 xx xx xx xx\nПосле ожидания 5с.\nОтправлено: 03 22 C9 14\nПринято: 07 62 C9 53 xx xx xx xx\nСчитанное значение увеличилось на 5")
            self.UDS_LED_SELECTOR.setDisabled(1)
        elif self.UDS_TEST_SELECTOR.currentIndex() == 16:
            self.EXP_UDS_BRS.setText("Отправлено: 03 22 C9 57\nПринято: 05 62 C9 57 xx xx\nxx xx -Состояние РБ и кнопки отключения ПБ\nУбедиться, что считанное состояние соответствует реальному")
            self.UDS_LED_SELECTOR.setDisabled(1)
    def UDS_LED_changed(self):
        if self.UDS_LED_SELECTOR.currentIndex() == 0:
            self.EXP_UDS_BRS.setText("Отправлено: 05 2F 38 01 03 00\nПринято: 05 6F 38 01 03 00\nДиагностический светодиод загорелся")
        elif self.UDS_LED_SELECTOR.currentIndex() == 1:
            self.EXP_UDS_BRS.setText("Отправлено: 05 2F 38 01 03 01\nПринято: 05 6F 38 01 03 01\nДиагностический светодиод погас")
        elif self.UDS_LED_SELECTOR.currentIndex() == 2:
            self.EXP_UDS_BRS.setText("Отправлено: 05 2F 38 02 03 00\nПринято: 05 6F 38 02 03 00\nСветодиод отключения ПБ переднего пассажира горит")
        elif self.UDS_LED_SELECTOR.currentIndex() == 3:
            self.EXP_UDS_BRS.setText("Отправлено: 05 2F 38 02 03 01\nПринято: 05 6F 38 02 03 01\nСветодиод отключения ПБ переднего пассажира погас")

    def SBR_test_changed(self):
        if self.SBR_test_selector.currentIndex() == 0:
            self.exp_res_SBR_brs.setText("При пристёгнутом ремне соответствующий сигнал SafetyBeltState равен 0х02 (SB fastened) \nПри непристёгнутом ремне соответствующий сигнал SafetyBeltState равен 0х01 (SB unfastened)")
        elif self.SBR_test_selector.currentIndex() == 1:
            self.exp_res_SBR_brs.setText("Сигнал DriverSafetyBeltReminder равен 0 (No warning)")
        elif self.SBR_test_selector.currentIndex() == 2:
            self.exp_res_SBR_brs.setText("Соответствующий сигнал SafetyBeltReminder равен 1 (Warning level 1)")
        elif self.SBR_test_selector.currentIndex() == 3:
            self.exp_res_SBR_brs.setText("Соответствующий сигнал SafetyBeltReminder  равен 2 (Warning level 2)")
        elif self.SBR_test_selector.currentIndex() == 4:
            self.exp_res_SBR_brs.setText("Соответствующий сигнал SafetyBeltReminder  равен 0 (No warning)")
        elif self.SBR_test_selector.currentIndex() == 6:
            self.exp_res_SBR_brs.setText("Сигнал FrontPassengerSafetyBeltReminder равен 0 (No warning)")
        elif self.SBR_test_selector.currentIndex() == 5:
            self.exp_res_SBR_brs.setText("После обнуления таймаута SafetyBeltReminder равен 0 (No warning)\n После сброса сигнал SafetyBeltReminder  равен 1 (Warning level 1)")
    '''Блок функций используемых для самодиагностики БУ'''
    def Read0x09(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x51
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        DTC_list = self.parse_UDS_errors(Result, 0x09)
        for i in range(0,len(DTC_list)):
            self.DIAG_ERRORS_BRS.append((str(DTC_list[i])))
    def run_Read0x09(self):
        Receiver=threading.Thread(target=self.Read0x09)
        Receiver.start()
    def Read0x08(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x52
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        DTC_list=self.parse_UDS_errors(Result, 0x08)
        for i in range(0, len(DTC_list)):
            self.DIAG_ERRORS_BRS.append((str(DTC_list[i])))
    def run_Read0x08(self):
        Receiver=threading.Thread(target=self.Read0x08)
        Receiver.start()
    def ClearDTC(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x53
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        self.DIAG_ACCEPTED_BRS.append("Очистка DTC:")
        self.DIAG_ACCEPTED_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
    def run_ClearDTC(self):
        Receiver=threading.Thread(target=self.ClearDTC)
        Receiver.start()
    def ECU_reset(self):

        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x56
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        print(Result)
        self.DIAG_ACCEPTED_BRS.append("Перезагрузка блока")
        time.sleep(0.05)
        self.DIAG_ACCEPTED_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
    def run_ECU_reset(self):
        Receiver=threading.Thread(target=self.ECU_reset)
        Receiver.start()
    def ExtendedDiagnostic(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x57
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        self.DIAG_ACCEPTED_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
    def run_ExtendedDiagnostic(self):
        Receiver=threading.Thread(target=self.ExtendedDiagnostic)
        Receiver.start()
    def Write_VIN0(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x54
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        self.DIAG_ACCEPTED_BRS.append(
            f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nОтправлено:{str(Result.frame[2].data.hex())}\nОтправлено:{str(Result.frame[3].data.hex())}")
    def run_Write_VIN0(self):
        Receiver=threading.Thread(target=self.Write_VIN0)
        Receiver.start()
    def Write_VIN1(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x55
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        self.DIAG_ACCEPTED_BRS.append(
            f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nОтправлено:{str(Result.frame[2].data.hex())}\nОтправлено:{str(Result.frame[3].data.hex())}")
    def run_Write_VIN1(self):
        Receiver=threading.Thread(target=self.Write_VIN1)
        Receiver.start()

    def Emulate_crash(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x58
        Command.accDataNumber=1
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len, 16)))
        bytes_read = self.UART.read(int(received_len, 16))
        self.UART.close()
        Result.ParseFromString(bytes_read)
        if(Result.measuredValue[0]==1):
             self.DIAG_ACCEPTED_BRS.append("Импульс на пиропатроне задетектирован")
        else:
            self.DIAG_ACCEPTED_BRS.append("Импульс на пиропатроне не задетектирован")
    def run_Emulate_crash(self):
        Receiver=threading.Thread(target=self.Emulate_crash)
        Receiver.start()

    def Send_periodic(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x59
        Command.DIAG_SEND_0x5D7=self.DIAG_0x5D7_CHECK.isChecked()
        if(Command.DIAG_SEND_0x5D7!=0):
            Command.vehicle_speed=self.DIAG_SPEED_SELECTOR.currentIndex()
        Command.DIAG_SEND_0x350 = self.DIAG_0x350_CHECK.isChecked()
        if(Command.DIAG_SEND_0x350!=0):
            Command.GenDiagEnable =self.DIAG_DIAGENABLE_SELECTOR.currentIndex()
        Command.DIAG_SEND_0x4F8 = self.DIAG_0x4F8_CHECK.isChecked()
        Command = Command.SerializeToString()
        self.UART.write(Command)
        self.UART.close()

    '''def run_Send_periodic(self):
        Receiver = threading.Thread(target=self.Emulate_crash)
        Receiver.start()'''
    def parse_UDS_errors(self,Result,Status_Byte):
        '''----------------Парсинг ошибок 0х09 ----------------------------'''
        DTC_list=[]
        indexes=[]
        tmp=0
        length=0
        length=len(Result.frame)
        print(length)
        for num in range(0, 5):
            for index in range(0, len(Result.frame[num].data)):
                Status_Byte_index = Result.frame[num].data.find(Status_Byte, index)
                if (Status_Byte_index != tmp):
                    indexes.append(Status_Byte_index)
                tmp = Status_Byte_index
            # заполняем массив indexes, который содержит позиции status байта в посылке
            for i in range(0, len(indexes)):
                if (indexes[i] <= 4 and indexes[i] != -1):
                    DTC = hex(((Result.frame[num].data[indexes[i] + 1]) << 16) + (
                                (Result.frame[num].data[indexes[i] + 2]) << 8) + (
                              Result.frame[num].data[indexes[i] + 3]))
                    print(DTC)
                    DTC_list.append(DTC)
                elif (indexes[i] == 5):
                    DTC = hex(((Result.frame[num].data[6]) << 16) + ((Result.frame[num].data[7]) << 8) + (
                    Result.frame[num + 1].data[1]))
                    print(DTC)
                    DTC_list.append(DTC)
                elif (indexes[i] == 6):  #####
                    DTC = hex(((Result.frame[num].data[7]) << 16) + ((Result.frame[num + 1].data[1]) << 8) + (
                    Result.frame[num + 1].data[2]))
                    print(DTC)
                    DTC_list.append(DTC)
                elif (indexes[i] == 7):
                    DTC = hex(((Result.frame[num + 1].data[1]) << 16) + ((Result.frame[num + 1].data[2]) << 8) + (
                    Result.frame[num + 1].data[3]))
                    print(DTC)
                    DTC_list.append(DTC)
            print("INDEXES:")
            print(indexes)
            indexes.clear()
        print(DTC_list)
        return DTC_list
    def Test1_handler(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x11
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        print((int(received_len,16)))
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        self.can_msg_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
        time.sleep(0.05)
        self.inittime_brs.append(str(Result.measuredValue[0]))
        time.sleep(0.05)
        if(Result.measuredValue[0]<300):
            self.initresult_brs.append("Success")
        else:
            self.initresult_brs.append("Fail")
        self.UART.close()
    def run_test1(self):
        Receiver=threading.Thread(target=self.Test1_handler)
        Receiver.start()

    def Test2_handler(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x12
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len=self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        for i in range(0,4):
            self.accepted_periodic_brs.append(f"Timestamp:{str(Result.frame[i].timestamp)}   id:{str(hex(Result.frame[i].id))}   DLC:{str(Result.frame[i].length)}   Data:{str(Result.frame[i].data.hex())}")
            time.sleep(0.01)
        self.measured_period_brs.append(f"{str(Result.measuredValue[0]/1000)} мс.")
        time.sleep(0.02)
        if (Result.measuredValue[0]/1000 < 110 and Result.measuredValue[0]/1000 > 90):
            self.result_periodic_brs.append("Success")
        else:
            self.result_periodic_brs.append("Fail")
        self.UART.close()

    def run_test2(self):
        Receiver=threading.Thread(target=self.Test2_handler)
        Receiver.start()
    def Test3_period_handler(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x13
        Command.accDataNumber=1
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len=self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        for i in range(0,4):
            self.accepted_trig_brs.append(f"Timestamp:{str(Result.frame[i].timestamp)}   id:{str(hex(Result.frame[i].id))}   DLC:{str(Result.frame[i].length)}   Data:{str(Result.frame[i].data.hex())}")
            time.sleep(0.01)
        self.measured_trig_brs.append(f"{str(Result.measuredValue[0]/1000)} мс.")
        time.sleep(0.01)
        if (Result.measuredValue[0]/1000 < 4.4 and Result.measuredValue[0]/1000 > 3.6):
            self.result_trig_brs.append("Success")
        else:
            self.result_trig_brs.append("Fail")
        self.UART.close()

    def run_test3_period(self):
        Receiver=threading.Thread(target=self.Test3_period_handler)
        Receiver.start()
    def Accelerometer_handler(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x22
        Command.accDataNumber=self.acc_selector.currentIndex()+1
        Command.AIRBAG_OFF=self.AIRBAG_OFF_btn.isChecked()
        if (Command.accDataNumber == 1):
            TTF = 30
        elif (Command.accDataNumber == 2):
            TTF = 12
        else:
            TTF = 0
        Cmd = Command.SerializeToString()
        self.UART.write(Cmd)
        received_len=self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        self.CRASHDETECTED_BRS.append(f"До столкновения:{Result.frame[0].data[0]&0b00000001}\nПосле столкновения:{Result.frame[1].data[0]&0b00000001}")
        time.sleep(0.02)
        if(Command.accDataNumber==1 or Command.accDataNumber==2):
          if (Result.measuredValue[0]/1000 < TTF+3 and Result.measuredValue[0]/1000 > TTF-3 ):
              self.got_res_brs.append(f"Success, TTF={Result.measuredValue[0]/1000}")
          else:
              self.got_res_brs.append(f"Fail, TTF={Result.measuredValue[0]/1000}")
        elif (Command.accDataNumber==3 or Command.accDataNumber==4):
            if(Result.measuredValue[0]/1000==0):
                self.got_res_brs.append("Success, СНБП не сработала")
            else:
                self.got_res_brs.append("Fail, СНБП сработала")
        self.UART.close()

    def run_accelerometer(self):
        Receiver=threading.Thread(target=self.Accelerometer_handler)
        Receiver.start()
    def UDS_handler(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        if (self.UDS_TEST_SELECTOR.currentIndex() < 15):
            Command.testNumber = self.UDS_TEST_SELECTOR.currentIndex()+0x31
        elif(self.UDS_TEST_SELECTOR.currentIndex() == 15):
            Command.testNumber = 0x301
        else:
            Command.testNumber = 0x302
        if(Command.testNumber==0x32):
            Command.LED=self.UDS_LED_SELECTOR.currentIndex()
        if(Command.testNumber==0x3E):
            Command.vehicle_speed=1
        Cmd = Command.SerializeToString()
        self.UART.write(Cmd)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result.ParseFromString(bytes_read)
        match Result.testNumber:
            case 0x31:#ECU reset
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
            case 0x32:#InputOutputControlByIdentifier
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
            case 0x33:#Проверка Tester Present 0x3E
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
            case 0x34:#Проверка CommunicationControl 0x28 disable tx
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
                time.sleep(0.01)
                if(Result.measuredValue[0]==0):
                    self.UDS_MSG_BRS.append("Сообщения по CAN не принимаются ")
                else:
                    self.UDS_MSG_BRS.append("Сообщения по CAN принимаются ")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[2].data.hex())}\nПринято:{str(Result.frame[3].data.hex())}")
                time.sleep(0.01)
                if (Result.measuredValue[1] == 0):
                    self.UDS_MSG_BRS.append("Сообщения по CAN не принимаются ")
                else:
                    self.UDS_MSG_BRS.append("Сообщения по CAN принимаются ")
            case 0x35: #Проверка CommunicationControl 0x28 disable tx,rx
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
                if (Result.measuredValue[0] == 0):
                    self.UDS_MSG_BRS.append("Сообщения по CAN не принимаются ")
                else:
                    self.UDS_MSG_BRS.append("Сообщения по CAN принимаются ")
                #ПРОВЕРИТЬ FDCAN->PSR И ЕСЛИ ОН МЕНЯЕТ СОСТОЯНИЕ ДОБАВИТЬ В OUTPUT
            case 0x36:#Проверка ClearDiagnosticInformation 0x14
                DTC_list=self.parse_UDS_errors(Result, 0x09)
                self.UDS_MSG_BRS.append("Считанные ошибки")
                time.sleep(0.01)
                for i in range(0,len(DTC_list)):
                    self.UDS_MSG_BRS.append(str(DTC_list[i]))
                    time.sleep(0.01)
                received_len = self.UART.read(2).hex()
                print(received_len)
                bytes_read = self.UART.read(int(received_len, 16))
                Result.ParseFromString(bytes_read)
                self.UDS_MSG_BRS.append("Очистка кодов ошибок и удаление информации об аварии")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nОтправлено:{str(Result.frame[2].data.hex())}\nПринято:{str(Result.frame[3].data.hex())}")
                time.sleep(0.01)
                DTC_list2 = self.parse_UDS_errors(Result, 0x09)
                self.UDS_MSG_BRS.append("Считанные ошибки")
                time.sleep(0.01)
                for i in range(0, len(DTC_list2)):
                    self.UDS_MSG_BRS.append(str(DTC_list2[i]))
                    time.sleep(0.01)
            case 0x37:   #read diag info
                print(Result)
            case 0x38:#control dtcsetting
                print(Result)
            case 0x39:#security access
                self.UDS_MSG_BRS.append(
                    f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nОтправлено:{str(Result.frame[2].data.hex())}\nПринято:{str(Result.frame[3].data.hex())}\nОтправлено:{str(Result.frame[4].data.hex())}\nПринято:{str(Result.frame[5].data.hex())}")
                time.sleep(0.02)
                if(Result.frame[5].data[1]==0x67 and Result.frame[5].data[2]==0x02):
                    self.UDS_MSG_BRS.append("Блок успешно вошёл в security access")
                else:
                    self.UDS_MSG_BRS.append("Ошибка входа в security access")
            case 0x3A: #DID ECU OPERATING STATES
                print(Result)
                self.UDS_MSG_BRS.append(
                    f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nОтправлено:{str(Result.frame[2].data.hex())}\nПринято:{str(Result.frame[3].data.hex())}\nОтправлено:{str(Result.frame[4].data.hex())}\nПринято:{str(Result.frame[5].data.hex())}")
                time.sleep(0.02)
                if (Result.frame[5].data[1] == 0x67 and Result.frame[5].data[2] == 0x02):
                    self.UDS_MSG_BRS.append("Блок успешно вошёл в security access\n")
                else:
                    self.UDS_MSG_BRS.append("Ошибка входа в security access\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Чтение DID:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[6].data.hex())}\nПринято:{str(Result.frame[7].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Изменение режима работы на Working:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[8].data.hex())}\nПринято:{str(Result.frame[9].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Перезагрузка блока:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[10].data.hex())}\nПринято:{str(Result.frame[11].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Чтение DID:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[12].data.hex())}\nПринято:{str(Result.frame[13].data.hex())}")
            case 0x3B: #DID ACU Configuration
                self.UDS_MSG_BRS.append(
                    f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nОтправлено:{str(Result.frame[2].data.hex())}\nПринято:{str(Result.frame[3].data.hex())}\nОтправлено:{str(Result.frame[4].data.hex())}\nПринято:{str(Result.frame[5].data.hex())}")
                time.sleep(0.02)
                if (Result.frame[5].data[1] == 0x67 and Result.frame[5].data[2] == 0x02):
                    self.UDS_MSG_BRS.append("Блок успешно вошёл в security access\n")
                else:
                    self.UDS_MSG_BRS.append("Ошибка входа в security access\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Чтение DID:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(
                    f"Отправлено:{str(Result.frame[6].data.hex())}\nПринято:{str(Result.frame[7].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Отключение передней подушки:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[8].data.hex())}\nПринято:{str(Result.frame[9].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Перезагрузка блока:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[10].data.hex())}\nПринято:{str(Result.frame[11].data.hex())}\n")
                time.sleep(0.01)
                if(Result.measuredValue[0]==0):
                    self.UDS_MSG_BRS.append("Импульс на пиропатроне не зарегистрирован\n")
                else:
                    self.UDS_MSG_BRS.append("Импульс на пиропатроне зарегистрирован\n")
                self.UDS_MSG_BRS.append("Чтение DID:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(
                    f"Отправлено:{str(Result.frame[12].data.hex())}\nПринято:{str(Result.frame[13].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Отключение ремня безопасности водителя")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(
                    f"Отправлено:{str(Result.frame[13].data.hex())}\nПринято:{str(Result.frame[14].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append("Перезагрузка блока:")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[15].data.hex())}\nПринято:{str(Result.frame[16].data.hex())}\n")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Состояние ремня безопасности водителя:")
                time.sleep(0.01)
                if(Result.measuredValue[1]==0):
                    self.UDS_MSG_BRS.append("Not monitored")
                else:
                    self.UDS_MSG_BRS.append("Unfastened")
            case 0x3C: #Read driver airbag resistance
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
                Resisatnce =0.01*((Result.frame[1].data[4]<<8)+Result.frame[1].data[5])
                self.UDS_MSG_BRS.append(f"Считанное сопротивление:{str(Resisatnce)} Ом")
            case 0x3D: #Read PAB Deactivation indicator status
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
                State=Result.frame[1].data[4]
                self.UDS_MSG_BRS.append(f"Состояние светодиода:{str(State)}")
            case 0x3E: #Read Vehicle speed
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Скорость:{str(0.01*((Result.frame[1].data[4] << 8) + (Result.frame[1].data[5])))} км/ч")
            case 0x3F:  # Read Battery Voltage
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Считанное напряжение:{str(0.1*(Result.frame[1].data[4]))} В.")
            case 0x301:  # Read ECU's lifetime timer
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}\nЗначение:{(Result.frame[1].data[3]<<24)+(Result.frame[1].data[4]<<16)+(Result.frame[1].data[5]<<8)+(Result.frame[1].data[6])}")
                time.sleep(0.02)
                self.UDS_MSG_BRS.append("После паузы 5 сек.")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[2].data.hex())}\nПринято:{str(Result.frame[3].data.hex())}\nЗначение:{(Result.frame[3].data[3] << 24) + (Result.frame[3].data[4] << 16) + (Result.frame[3].data[5] << 8) + (Result.frame[3].data[6])}")
                time.sleep(0.01)
                self.UDS_MSG_BRS.append(f"Разность:{((Result.frame[3].data[3] << 24) + (Result.frame[3].data[4] << 16) + (Result.frame[3].data[5] << 8) + (Result.frame[3].data[6]))-((Result.frame[1].data[3]<<24)+(Result.frame[1].data[4]<<16)+(Result.frame[1].data[5]<<8)+(Result.frame[1].data[6]))}")
            case 0x302:  # Read Occupant Input
                self.UDS_MSG_BRS.append(f"Отправлено:{str(Result.frame[0].data.hex())}\nПринято:{str(Result.frame[1].data.hex())}")

        self.UART.close()
    def run_UDS(self):
        Receiver=threading.Thread(target=self.UDS_handler)
        Receiver.start()
    def SBR_handler(self):
        self.UART.open()
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = self.SBR_test_selector.currentIndex()+0x41
        Command.Seatbelt_position=self.Seatbelt_selector.currentIndex()+1
        match Command.testNumber:
            case 0x41: #Проверка корректности передачи состояний РБ по CAN шине
                Command.VehicleStateExtended=1
            case 0x42: #Проверка активации системы при включении зажигания
                Command.VehicleStateExtended=0
                Command.vehicle_speed=0
            case 0x43: #Проверка включения 1 уровня тревоги seat belt reminder. Скорость < 20 km/h
                Command.VehicleStateExtended = 1
                Command.vehicle_speed = 0
            case 0x44: #Проверка включения 2 уровня тревоги seat belt reminder. Скорость > 20 km/h
                Command.VehicleStateExtended = 1
                Command.vehicle_speed = 1
            case 0x45:  # Проверка отключения сообщения о тревоге по таймауту
                Command.VehicleStateExtended = 1
                Command.vehicle_speed = 0
            case 0x46:  # Проверка обнуления таймаута
                Command.VehicleStateExtended = 1
                Command.vehicle_speed = 0
            case 0x47:  # Проверка отключения тревоги при открытии дверей
                Command.VehicleStateExtended = 1
                Command.vehicle_speed = 0
        Cmd = Command.SerializeToString()
        print(Cmd)
        self.UART.write(Cmd)
        received_len=self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        match Result.testNumber:
            case 0x41:
                for i in range(0, 2):
                    self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[i].timestamp)}   id:{str(hex(Result.frame[i].id))}   DLC:{str(Result.frame[i].length)}   Data:{str(Result.frame[i].data.hex())}")
                time.sleep(0.1)
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(f"При пристегнутом ремне: {hex((Result.frame[0].data[0] & DriverSafetyBeltState.Unavalible) >> DriverSafetyBeltState.shift)}\nПри непристегнутом ремне: {hex((Result.frame[1].data[0] & DriverSafetyBeltState.Unavalible) >> DriverSafetyBeltState.shift)}")
                        time.sleep(0.1)
                        if (Result.frame[0].data[0] & DriverSafetyBeltState.Unavalible == DriverSafetyBeltState.SB_fastened and Result.frame[1].data[0] & DriverSafetyBeltState.Unavalible == DriverSafetyBeltState.SB_unfastened):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(f"При пристегнутом ремне: {hex((Result.frame[0].data[0] & FrontPassengerSafetyBeltState.Unavalible) >> FrontPassengerSafetyBeltState.shift)}\nПри непристегнутом ремне: {hex((Result.frame[1].data[0] &FrontPassengerSafetyBeltState.Unavalible) >> FrontPassengerSafetyBeltState.shift)}")
                        if (Result.frame[0].data[0] & FrontPassengerSafetyBeltState.Unavalible == FrontPassengerSafetyBeltState.SB_fastened and Result.frame[1].data[0] & FrontPassengerSafetyBeltState.Unavalible == FrontPassengerSafetyBeltState.SB_unfastened):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(f"При пристегнутом ремне: {hex((Result.frame[0].data[3] & SecondRowRightSafetyBeltState.Unavalible) >> SecondRowLeftSafetyBeltState.shift)}\nПри непристегнутом ремне: {hex((Result.frame[1].data[3] & SecondRowRightSafetyBeltState.Unavalible) >> SecondRowLeftSafetyBeltState.shift)}")
                        if (Result.frame[0].data[3] & SecondRowRightSafetyBeltState.Unavalible == SecondRowRightSafetyBeltState.SB_fastened and Result.frame[1].data[3] & SecondRowRightSafetyBeltState.Unavalible == SecondRowRightSafetyBeltState.SB_unfastened):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(f"При пристегнутом ремне: {hex((Result.frame[0].data[2] & SecondRowCenterSafetyBeltState.Unavalible) >> SecondRowCenterSafetyBeltState.shift)}\nПри непристегнутом ремне: {hex((Result.frame[1].data[2] & SecondRowCenterSafetyBeltState.Unavalible) >> SecondRowCenterSafetyBeltState.shift)}")
                        if (Result.frame[0].data[2] & SecondRowCenterSafetyBeltState.Unavalible == SecondRowCenterSafetyBeltState.SB_unfastened and Result.frame[1].data[2] & SecondRowCenterSafetyBeltState.Unavalible== SecondRowCenterSafetyBeltState.SB_unfastened):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(f"При пристегнутом ремне: {hex(((Result.frame[0].data[2] & SecondRowLeftSafetyBeltState.Unavalible_B2) >> SecondRowLeftSafetyBeltState.shift)+Result.frame[0].data[3]&SecondRowLeftSafetyBeltState.Unavalible_B3)}\nПри непристегнутом ремне: {hex(((Result.frame[1].data[2] & SecondRowLeftSafetyBeltState.Unavalible_B2) >> SecondRowLeftSafetyBeltState.shift)+Result.frame[1].data[3]&SecondRowLeftSafetyBeltState.Unavalible_B3)}")
                        if ((Result.frame[0].data[2] & SecondRowLeftSafetyBeltState.Unavalible_B2) >> SecondRowLeftSafetyBeltState.shift== SecondRowLeftSafetyBeltState.SB_fastened_B2 and Result.frame[0].data[3]&SecondRowLeftSafetyBeltState.Unavalible_B3==SecondRowLeftSafetyBeltState.SB_fastened_B3 and(Result.frame[1].data[2] & SecondRowLeftSafetyBeltState.Unavalible_B2) >> SecondRowLeftSafetyBeltState.shift==SecondRowLeftSafetyBeltState.SB_unfastened_B2 and Result.frame[1].data[3]&SecondRowLeftSafetyBeltState.Unavalible_B3==SecondRowLeftSafetyBeltState.SB_unfastened_B3):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
            case 0x42:
                self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
                time.sleep(0.1)
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(f"Значение DriverSafetyBeltReminder: {hex((Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used) )}")
                        if (Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(f"Значение FrontPassengerSafetyBeltReminder: {hex((Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}")
                        if (Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.No_Warning ):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(f"Значение SecondRowRightSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.No_Warning ):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(f"Значение SecondRowCenterSafetyBeltWarning: {hex((Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(f"Значение SecondRowLeftSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used) )}")
                        if (Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")

            case 0x43:
                self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
                time.sleep(0.05)
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(f"Значение DriverSafetyBeltReminder: {hex((Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used) )}")
                        if (Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(f"Значение FrontPassengerSafetyBeltReminder: {hex((Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}")
                        if (Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.Warning_level_1 ):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(f"Значение SecondRowRightSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.Warning_level_1 ):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(f"Значение SecondRowCenterSafetyBeltWarning: {hex((Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(f"Значение SecondRowLeftSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used) )}")
                        if (Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
            case 0x44:
                self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
                time.sleep(0.05)
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(f"Значение DriverSafetyBeltReminder: {hex((Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used) )}")
                        if (Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.Warning_level_2):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(f"Значение FrontPassengerSafetyBeltReminder: {hex((Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}")
                        if (Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.Warning_level_2 ):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(f"Значение SecondRowRightSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.Warning_level_2 ):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(f"Значение SecondRowCenterSafetyBeltWarning: {hex((Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.Warning_level_2):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(f"Значение SecondRowLeftSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used) )}")
                        if (Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.Warning_level_2):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
            case 0x45:
                self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
                time.sleep(0.05)
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(
                            f"Значение DriverSafetyBeltReminder: {hex((Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used))}")
                        if (Result.frame[0].data[
                            1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(
                            f"Значение FrontPassengerSafetyBeltReminder: {hex((Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}")
                        if (Result.frame[0].data[
                            1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(
                            f"Значение SecondRowRightSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[
                            2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(
                            f"Значение SecondRowCenterSafetyBeltWarning: {hex((Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[
                            1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(
                            f"Значение SecondRowLeftSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used))}")
                        if (Result.frame[0].data[
                            2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")

            case 0x46:
                for i in range(0,2):
                    self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
                time.sleep(0.05)
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(
                            f"Значение DriverSafetyBeltReminder до обнуления таймаута: {hex((Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used))}\nЗначение DriverSafetyBeltReminder после обнуления таймаута: {hex((Result.frame[1].data[1] & DriverSafetyBeltReminder.Not_used))}")
                        if (Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.No_Warning and Result.frame[1].data[1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(f"Значение FrontPassengerSafetyBeltReminder до обнуления таймаута: {hex((Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}\nЗначение FrontPassengerSafetyBeltReminder после обнуления таймаута: {hex((Result.frame[1].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}")
                        if (Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.No_Warning and Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(f"Значение SecondRowRightSafetyBeltWarning до обнуления таймаута: {hex((Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}\nЗначение SecondRowRightSafetyBeltWarning после обнуления таймаута: {hex((Result.frame[1].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.No_Warning and Result.frame[1].data[2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(f"Значение SecondRowCenterSafetyBeltWarning до обнуления таймаута: {hex((Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}\nЗначение SecondRowCenterSafetyBeltWarning после обнуления таймаута: {hex((Result.frame[1].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.No_Warning and Result.frame[1].data[1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(f"Значение SecondRowLeftSafetyBeltWarning до обнуления таймаута: {hex((Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used))}\nЗначение SecondRowLeftSafetyBeltWarning после обнуления таймаута: {hex((Result.frame[1].data[2] & SecondRowLeftSafetyBeltWarning.Not_used))}")
                        if (Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.No_Warning and Result.frame[1].data[2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.Warning_level_1):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
            case 0x47:
                self.acc_SBR_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
                match Command.Seatbelt_position:
                    case 1:
                        self.got_res_SBR_brs.append(
                            f"Значение DriverSafetyBeltReminder: {hex((Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used))}")
                        if (Result.frame[0].data[1] & DriverSafetyBeltReminder.Not_used == DriverSafetyBeltReminder.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 2:
                        self.got_res_SBR_brs.append(
                            f"Значение FrontPassengerSafetyBeltReminder: {hex((Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used) >> FrontPassengerSafetyBeltReminder.shift)}")
                        if (Result.frame[0].data[1] & FrontPassengerSafetyBeltReminder.Not_used == FrontPassengerSafetyBeltReminder.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 3:
                        self.got_res_SBR_brs.append(
                            f"Значение SecondRowRightSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used) >> SecondRowRightSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[2] & SecondRowRightSafetyBeltWarning.Not_used == SecondRowRightSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 4:
                        self.got_res_SBR_brs.append(
                            f"Значение SecondRowCenterSafetyBeltWarning: {hex((Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used) >> SecondRowCenterSafetyBeltWarning.shift)}")
                        if (Result.frame[0].data[1] & SecondRowCenterSafetyBeltWarning.Not_used == SecondRowCenterSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
                    case 5:
                        self.got_res_SBR_brs.append(
                            f"Значение SecondRowLeftSafetyBeltWarning: {hex((Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used))}")
                        if (Result.frame[0].data[2] & SecondRowLeftSafetyBeltWarning.Not_used == SecondRowLeftSafetyBeltWarning.No_Warning):
                            self.got_res_SBR_brs.append("Success")
                        else:
                            self.got_res_SBR_brs.append("Fail")
        #print(Result)
        self.UART.close()

    def run_SBR(self):
        Receiver=threading.Thread(target=self.SBR_handler)
        Receiver.start()
    def EDR_read(self):
        self.UART.open()
        Command = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0x61
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result=Parse_EDR(bytes_read)
        self.EDR_READ_BRS.append(Result)
        self.UART.close()

    def run_EDR_read(self):
        Receiver = threading.Thread(target=self.EDR_read)
        Receiver.start()
    def run_Self_diag(self):
        Receiver=threading.Thread(target=self.Self_diag_handler)
        Receiver.start()
    def close(self):
        self.UART.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
