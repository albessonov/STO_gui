# -*- coding: utf-8 -*-


# Form implementation generated from reading ui file 'avtovaz.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from nanopb_pb2 import *
import STO_tests_V2_nanopb_pb2 as Messages
from PyQt5 import QtSerialPort
import serial
import threading
import multiprocessing


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1029, 754)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1021, 741))
        self.tabWidget.setObjectName("tabWidget")
        self.init_tab = QtWidgets.QWidget()
        self.init_tab.setObjectName("init_tab")
        self.groupBox_2 = QtWidgets.QGroupBox(self.init_tab)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 0, 1001, 241))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.Run_Init_btn = QtWidgets.QPushButton(self.groupBox_2)
        self.Run_Init_btn.setGeometry(QtCore.QRect(660, 40, 271, 28))
        self.Run_Init_btn.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.Run_Init_btn.setObjectName("Run_Init_btn")
        self.inittime_brs = QtWidgets.QTextBrowser(self.groupBox_2)
        self.inittime_brs.setGeometry(QtCore.QRect(660, 90, 271, 31))
        self.inittime_brs.setObjectName("inittime_brs")
        self.initresult_brs = QtWidgets.QTextBrowser(self.groupBox_2)
        self.initresult_brs.setGeometry(QtCore.QRect(660, 150, 271, 31))
        self.initresult_brs.setObjectName("initresult_brs")
        self.Inittime_lbl = QtWidgets.QLabel(self.groupBox_2)
        self.Inittime_lbl.setGeometry(QtCore.QRect(40, 90, 271, 20))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Armenian")
        font.setPointSize(10)
        self.Inittime_lbl.setFont(font)
        self.Inittime_lbl.setTextFormat(QtCore.Qt.AutoText)
        self.Inittime_lbl.setObjectName("Inittime_lbl")
        self.Initreuult_lbl = QtWidgets.QLabel(self.groupBox_2)
        self.Initreuult_lbl.setGeometry(QtCore.QRect(80, 150, 161, 20))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Armenian")
        font.setPointSize(10)
        self.Initreuult_lbl.setFont(font)
        self.Initreuult_lbl.setObjectName("Initreuult_lbl")
        self.can_msg_brs = QtWidgets.QTextBrowser(self.init_tab)
        self.can_msg_brs.setGeometry(QtCore.QRect(30, 330, 951, 241))
        self.can_msg_brs.setObjectName("can_msg_brs")
        self.can_msg_lbl = QtWidgets.QLabel(self.init_tab)
        self.can_msg_lbl.setGeometry(QtCore.QRect(40, 300, 261, 16))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.can_msg_lbl.setFont(font)
        self.can_msg_lbl.setObjectName("can_msg_lbl")
        self.tabWidget.addTab(self.init_tab, "")
        self.can_tab = QtWidgets.QWidget()
        self.can_tab.setObjectName("can_tab")
        self.groupBox_3 = QtWidgets.QGroupBox(self.can_tab)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 0, 1001, 361))
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.perod_periodic_btn = QtWidgets.QPushButton(self.groupBox_3)
        self.perod_periodic_btn.setGeometry(QtCore.QRect(720, 80, 251, 31))
        self.perod_periodic_btn.setObjectName("perod_periodic_btn")
        self.measured_period_brs = QtWidgets.QTextBrowser(self.groupBox_3)
        self.measured_period_brs.setGeometry(QtCore.QRect(720, 190, 256, 31))
        self.measured_period_brs.setObjectName("measured_period_brs")
        self.result_periodic_brs = QtWidgets.QTextBrowser(self.groupBox_3)
        self.result_periodic_brs.setGeometry(QtCore.QRect(720, 300, 256, 31))
        self.result_periodic_brs.setObjectName("result_periodic_brs")
        self.period_peciodic_title = QtWidgets.QLabel(self.groupBox_3)
        self.period_peciodic_title.setGeometry(QtCore.QRect(270, 20, 491, 31))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light SemiCondensed")
        font.setPointSize(14)
        self.period_peciodic_title.setFont(font)
        self.period_peciodic_title.setObjectName("period_peciodic_title")
        self.accepted_periodic_brs = QtWidgets.QTextBrowser(self.groupBox_3)
        self.accepted_periodic_brs.setGeometry(QtCore.QRect(10, 140, 611, 192))
        self.accepted_periodic_brs.setObjectName("accepted_periodic_brs")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(720, 160, 151, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setGeometry(QtCore.QRect(720, 280, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_3)
        self.label_7.setGeometry(QtCore.QRect(20, 110, 231, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.groupBox_4 = QtWidgets.QGroupBox(self.can_tab)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 360, 1001, 361))
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.start_trig_btn = QtWidgets.QPushButton(self.groupBox_4)
        self.start_trig_btn.setGeometry(QtCore.QRect(720, 80, 251, 31))
        self.start_trig_btn.setObjectName("start_trig_btn")
        self.measured_trig_brs = QtWidgets.QTextBrowser(self.groupBox_4)
        self.measured_trig_brs.setGeometry(QtCore.QRect(720, 190, 256, 31))
        self.measured_trig_brs.setObjectName("measured_trig_brs")
        self.result_trig_brs = QtWidgets.QTextBrowser(self.groupBox_4)
        self.result_trig_brs.setGeometry(QtCore.QRect(720, 300, 256, 31))
        self.result_trig_brs.setObjectName("result_trig_brs")
        self.period_trig_title = QtWidgets.QLabel(self.groupBox_4)
        self.period_trig_title.setGeometry(QtCore.QRect(180, 20, 631, 31))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light SemiCondensed")
        font.setPointSize(14)
        self.period_trig_title.setFont(font)
        self.period_trig_title.setObjectName("period_trig_title")
        self.accepted_trig_brs = QtWidgets.QTextBrowser(self.groupBox_4)
        self.accepted_trig_brs.setGeometry(QtCore.QRect(10, 140, 611, 192))
        self.accepted_trig_brs.setObjectName("accepted_trig_brs")
        self.measured_trig_lbl = QtWidgets.QLabel(self.groupBox_4)
        self.measured_trig_lbl.setGeometry(QtCore.QRect(720, 160, 151, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.measured_trig_lbl.setFont(font)
        self.measured_trig_lbl.setObjectName("measured_trig_lbl")
        self.result_trig_lbl = QtWidgets.QLabel(self.groupBox_4)
        self.result_trig_lbl.setGeometry(QtCore.QRect(720, 280, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.result_trig_lbl.setFont(font)
        self.result_trig_lbl.setObjectName("result_trig_lbl")
        self.accepted_trig_lbl = QtWidgets.QLabel(self.groupBox_4)
        self.accepted_trig_lbl.setGeometry(QtCore.QRect(20, 110, 231, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.accepted_trig_lbl.setFont(font)
        self.accepted_trig_lbl.setObjectName("accepted_trig_lbl")
        self.tabWidget.addTab(self.can_tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.groupBox = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox.setGeometry(QtCore.QRect(700, 10, 311, 281))
        self.groupBox.setObjectName("groupBox")
        self.AIRBAG_OFF_btn = QtWidgets.QRadioButton(self.groupBox)
        self.AIRBAG_OFF_btn.setGeometry(QtCore.QRect(10, 40, 261, 20))
        self.AIRBAG_OFF_btn.setObjectName("AIRBAG_OFF_btn")
        self.acc_selector = QtWidgets.QComboBox(self.groupBox)
        self.acc_selector.setGeometry(QtCore.QRect(10, 90, 131, 21))
        self.acc_selector.setObjectName("acc_selector")
        self.acc_selector.addItem("")
        self.acc_selector.addItem("")
        self.acc_selector.addItem("")
        self.acc_selector.addItem("")
        self.acc_selector_lbl = QtWidgets.QLabel(self.groupBox)
        self.acc_selector_lbl.setGeometry(QtCore.QRect(150, 90, 161, 16))
        self.acc_selector_lbl.setObjectName("acc_selector_lbl")
        self.groupBox_5 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_5.setGeometry(QtCore.QRect(0, 10, 701, 281))
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.start_acc_btn = QtWidgets.QPushButton(self.groupBox_5)
        self.start_acc_btn.setGeometry(QtCore.QRect(340, 20, 301, 41))
        self.start_acc_btn.setObjectName("start_acc_btn")
        self.exp_res_acc_brs = QtWidgets.QTextBrowser(self.groupBox_5)
        self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=30 мс")
        self.exp_res_acc_brs.setGeometry(QtCore.QRect(330, 80, 331, 31))
        self.exp_res_acc_brs.setObjectName("exp_res_acc_brs")
        self.got_res_brs = QtWidgets.QTextBrowser(self.groupBox_5)
        self.got_res_brs.setGeometry(QtCore.QRect(330, 170, 331, 31))
        self.got_res_brs.setObjectName("got_res_brs")
        self.expected_res_acc_lbl = QtWidgets.QLabel(self.groupBox_5)
        self.expected_res_acc_lbl.setGeometry(QtCore.QRect(90, 80, 161, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.expected_res_acc_lbl.setFont(font)
        self.expected_res_acc_lbl.setObjectName("expected_res_acc_lbl")
        self.got_res_acc_lbl = QtWidgets.QLabel(self.groupBox_5)
        self.got_res_acc_lbl.setGeometry(QtCore.QRect(90, 170, 161, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.got_res_acc_lbl.setFont(font)
        self.got_res_acc_lbl.setObjectName("got_res_acc_lbl")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.groupBox_6 = QtWidgets.QGroupBox(self.tab_6)
        self.groupBox_6.setGeometry(QtCore.QRect(0, 0, 511, 701))
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.start_SBR_btn = QtWidgets.QPushButton(self.groupBox_6)
        self.start_SBR_btn.setGeometry(QtCore.QRect(20, 40, 421, 41))
        self.start_SBR_btn.setObjectName("start_SBR_btn")
        self.SBR_test_selector = QtWidgets.QComboBox(self.groupBox_6)
        self.SBR_test_selector.setGeometry(QtCore.QRect(20, 130, 421, 31))
        self.SBR_test_selector.setObjectName("SBR_test_selector")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.SBR_test_selector.addItem("")
        self.sbr_test_sel_lbl = QtWidgets.QLabel(self.groupBox_6)
        self.sbr_test_sel_lbl.setGeometry(QtCore.QRect(170, 100, 151, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.sbr_test_sel_lbl.setFont(font)
        self.sbr_test_sel_lbl.setObjectName("sbr_test_sel_lbl")
        self.exp_res_SBR_brs = QtWidgets.QTextBrowser(self.groupBox_6)
        self.exp_res_SBR_brs.setGeometry(QtCore.QRect(10, 400, 461, 61))
        self.exp_res_SBR_brs.setObjectName("exp_res_SBR_brs")
        self.exp_res_SBR_brs.setText("При пристёгнутом ремне сигнал DriverSafetyBeltState равен 0х02 (SB fastened) \nПри непристёгнутом ремне сигнал DriverSafetyBeltState равен 0х01 (SB unfastened)")
        self.got_res_SBR_brs = QtWidgets.QTextBrowser(self.groupBox_6)
        self.got_res_SBR_brs.setGeometry(QtCore.QRect(10, 590, 461, 61))
        self.got_res_SBR_brs.setObjectName("got_res_SBR_brs")
        self.exp_res_SBR_lbl = QtWidgets.QLabel(self.groupBox_6)
        self.exp_res_SBR_lbl.setGeometry(QtCore.QRect(20, 370, 181, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.exp_res_SBR_lbl.setFont(font)
        self.exp_res_SBR_lbl.setObjectName("exp_res_SBR_lbl")
        self.got_res_SBR_lbl = QtWidgets.QLabel(self.groupBox_6)
        self.got_res_SBR_lbl.setGeometry(QtCore.QRect(20, 560, 221, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.got_res_SBR_lbl.setFont(font)
        self.got_res_SBR_lbl.setObjectName("got_res_SBR_lbl")
        self.acc_SBR_brs = QtWidgets.QTextBrowser(self.tab_6)
        self.acc_SBR_brs.setGeometry(QtCore.QRect(530, 150, 471, 481))
        self.acc_SBR_brs.setObjectName("acc_SBR_brs")
        self.accepted_SBR_title = QtWidgets.QLabel(self.tab_6)
        self.accepted_SBR_title.setGeometry(QtCore.QRect(540, 110, 161, 20))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.accepted_SBR_title.setFont(font)
        self.accepted_SBR_title.setObjectName("accepted_SBR_title")
        self.tabWidget.addTab(self.tab_6, "")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        self.Run_Init_btn.clicked.connect(self.run_test1)  # type: ignore
        self.Run_Init_btn.clicked.connect(self.inittime_brs.clear)
        self.Run_Init_btn.clicked.connect(self.initresult_brs.clear)
        self.Run_Init_btn.clicked.connect(self.can_msg_brs.clear)

        self.perod_periodic_btn.clicked.connect(self.run_test2) # type: ignore
        self.perod_periodic_btn.clicked.connect(self.accepted_periodic_brs.clear)  # type: ignore
        self.perod_periodic_btn.clicked.connect(self.measured_period_brs.clear)  # type: ignore
        self.perod_periodic_btn.clicked.connect(self.result_periodic_brs.clear)

        self.start_trig_btn.clicked.connect(self.run_test3_period)
        self.perod_periodic_btn.clicked.connect(self.accepted_trig_brs.clear)
        self.perod_periodic_btn.clicked.connect(self.measured_trig_brs.clear)
        self.perod_periodic_btn.clicked.connect(self.result_trig_brs.clear)


        self.start_acc_btn.clicked.connect(self.run_test4)
        self.start_acc_btn.clicked.connect(self.got_res_brs.clear)

        self.start_SBR_btn.clicked.connect(self.SBR_test_selector.clear) # type: ignore
        self.acc_selector.currentIndexChanged['int'].connect(self.acc_set_changed) # type: ignore
        self.SBR_test_selector.currentIndexChanged['int'].connect(self.SBR_test_changed) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "СТО СНБП АВТОВАЗ"))
        self.Run_Init_btn.setText(_translate("MainWindow", "Старт"))
        self.Inittime_lbl.setText(_translate("MainWindow", "Измеренное время инциализации"))
        self.Initreuult_lbl.setText(_translate("MainWindow", "Результат проверки"))
        self.can_msg_lbl.setText(_translate("MainWindow", "Принятые сообщения CAN"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.init_tab), _translate("MainWindow", "Проверка инициализации"))
        self.perod_periodic_btn.setText(_translate("MainWindow", "Старт"))
        self.period_peciodic_title.setText(_translate("MainWindow", "Измерение периода периодических CAN-сообщений"))
        self.label_5.setText(_translate("MainWindow", "Измеренный период"))
        self.label_6.setText(_translate("MainWindow", "Результат"))
        self.label_7.setText(_translate("MainWindow", "Принятые CAN-сообщения"))
        self.start_trig_btn.setText(_translate("MainWindow", "Старт"))
        self.period_trig_title.setText(_translate("MainWindow", "Измерение периода CAN-сообщений при срабатывании системы"))
        self.measured_trig_lbl.setText(_translate("MainWindow", "Измеренный период"))
        self.result_trig_lbl.setText(_translate("MainWindow", "Результат"))
        self.accepted_trig_lbl.setText(_translate("MainWindow", "Принятые CAN-сообщения"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.can_tab), _translate("MainWindow", "Проверка периода CAN"))
        self.groupBox.setTitle(_translate("MainWindow", "Параметры испытания"))
        self.AIRBAG_OFF_btn.setText(_translate("MainWindow", "Отключить ПБ переднего пассажира"))
        self.acc_selector.setItemText(0, _translate("MainWindow", "Front 1885-XGE 56km\h"))
        self.acc_selector.setItemText(1, _translate("MainWindow", "Front XGF 100% 50km\h"))
        self.acc_selector.setItemText(2, _translate("MainWindow", "Front 1882 XGE 15km\h"))
        self.acc_selector.setItemText(3, _translate("MainWindow", "Rear 1883-XGE 38 km\h"))
        self.acc_selector_lbl.setText(_translate("MainWindow", "Выбор набора ускорений"))
        self.start_acc_btn.setText(_translate("MainWindow", "Старт"))
        self.expected_res_acc_lbl.setText(_translate("MainWindow", "Ожидаемый результат"))
        self.got_res_acc_lbl.setText(_translate("MainWindow", "Полученный результат"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Проверка срабатывания системы"))
        self.start_SBR_btn.setText(_translate("MainWindow", "Старт"))
        self.SBR_test_selector.setItemText(0, _translate("MainWindow", "Проверка корректности передачи состояний РБ по CAN шине"))
        self.SBR_test_selector.setItemText(1, _translate("MainWindow", "Проверка активации системы при включении зажигания"))
        self.SBR_test_selector.setItemText(2, _translate("MainWindow", "Проверка включения 1 уровня тревоги seat belt reminder"))
        self.SBR_test_selector.setItemText(3, _translate("MainWindow", "Проверка включения 2 уровня тревоги seat belt reminder"))
        self.SBR_test_selector.setItemText(4, _translate("MainWindow", "Проверка отключения сообщения о тревоге по таймауту"))
        self.SBR_test_selector.setItemText(5, _translate("MainWindow", "Проверка обнуления таймаута"))
        self.SBR_test_selector.setItemText(6, _translate("MainWindow", "Проверка отключения тревоги при открытии дверей"))
        self.sbr_test_sel_lbl.setText(_translate("MainWindow", "Запускаемый тест"))
        self.exp_res_SBR_lbl.setText(_translate("MainWindow", "Ожидаемый результат"))
        self.got_res_SBR_lbl.setText(_translate("MainWindow", "Полученный результат"))
        self.accepted_SBR_title.setText(_translate("MainWindow", "Ход проверки"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("MainWindow", "Проверка SBR"))

    def acc_set_changed(self):
        if self.acc_selector.currentIndex() == 0:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=30 мс")
        elif self.acc_selector.currentIndex() == 1:
            self.exp_res_acc_brs.setText("СНПБ срабатывает, TTF=12 мс")
        elif self.acc_selector.currentIndex() == 2:
            self.exp_res_acc_brs.setText("СНПБ не срабатывает")
        elif self.acc_selector.currentIndex() == 3:
            self.exp_res_acc_brs.setText("СНПБ не срабатывает")
    def SBR_test_changed(self):
        if self.SBR_test_selector.currentIndex() == 0:
            self.exp_res_SBR_brs.setText("При пристёгнутом ремне сигнал DriverSafetyBeltState равен 0х02 (SB fastened) \nПри непристёгнутом ремне сигнал DriverSafetyBeltState равен 0х01 (SB unfastened)")
        elif self.SBR_test_selector.currentIndex() == 1:
            self.exp_res_SBR_brs.setText("Сигнал DriverSafetyBeltReminder равен 0 (No warning)")
        elif self.SBR_test_selector.currentIndex() == 2:
            self.exp_res_SBR_brs.setText("Сигнал DriverSafetyBeltReminder равен 1 (Warning level 1)")
        elif self.SBR_test_selector.currentIndex() == 3:
            self.exp_res_SBR_brs.setText("Сигнал DriverSafetyBeltReminder  равен 2 (Warning level 2)")
        elif self.SBR_test_selector.currentIndex() == 4:
            self.exp_res_SBR_brs.setText("Сигнал DriverSafetyBeltReminder  равен 0 (No warning)")
        elif self.SBR_test_selector.currentIndex() == 6:
            self.exp_res_SBR_brs.setText("Сигнал FrontPassengerSafetyBeltReminder равен 0 (No warning)")
        elif self.SBR_test_selector.currentIndex() == 5:
            self.exp_res_SBR_brs.setText("При пристёгнутом ремне сигнал DriverSafetyBeltState равен 0х02 SB fastened\n При НЕпристёгнутом ремне сигнал DriverSafetyBeltState  равен 0х01 SB unfastened")

    def Test1_handler(self):
        self.UART = serial.Serial('COM8', 115200)
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 1
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(1).hex()
        print((int(received_len,16)))
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        self.can_msg_brs.append(f"Timestamp:{str(Result.frame[0].timestamp)}   id:{str(hex(Result.frame[0].id))}   DLC:{str(Result.frame[0].length)}   Data:{str(Result.frame[0].data.hex())}")
        self.inittime_brs.append(str(Result.measuredValue[0]))
        if(Result.measuredValue[0]<300):
            self.initresult_brs.append("Success")
        else:
            self.initresult_brs.append("Fail")
        self.UART.close()
    def run_test1(self):
        Receiver=threading.Thread(target=self.Test1_handler)
        Receiver.start()

    def Test2_handler(self):
        self.UART = serial.Serial('COM8', 115200)
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 2
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len=self.UART.read(1).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        for i in range(0,4):
            self.accepted_periodic_brs.append(
                f"Timestamp:{str(Result.frame[i].timestamp)}   id:{str(hex(Result.frame[i].id))}   DLC:{str(Result.frame[i].length)}   Data:{str(Result.frame[i].data.hex())}")
        self.measured_period_brs.append(f"{str(Result.measuredValue[0]/1000)} мс.")
        if (Result.measuredValue[0]/1000 < 110 and Result.measuredValue[0]/1000 > 90):
            self.result_periodic_brs.append("Success")
        else:
            self.result_periodic_brs.append("Fail")
        self.UART.close()

    def run_test2(self):
        Receiver=threading.Thread(target=self.Test2_handler)
        Receiver.start()
    def Test3_period_handler(self):
        self.UART = serial.Serial('COM8', 115200)
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 3
        Command.accDataNumber=1
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len=self.UART.read(1).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        for i in range(0,4):
            self.accepted_trig_brs.append(
                f"Timestamp:{str(Result.frame[i].timestamp)}   id:{str(hex(Result.frame[i].id))}   DLC:{str(Result.frame[i].length)}   Data:{str(Result.frame[i].data.hex())}")
        self.measured_trig_brs.append(f"{str(Result.measuredValue[0]/1000)} мс.")
        if (Result.measuredValue[0]/1000 < 4.4 and Result.measuredValue[0]/1000 > 3.6):
            self.result_trig_brs.append("Success")
        else:
            self.result_trig_brs.append("Fail")
        self.UART.close()

    def run_test3_period(self):
        Receiver=threading.Thread(target=self.Test3_period_handler)
        Receiver.start()
    def Test4_handler(self):
        self.UART = serial.Serial('COM8', 115200)
        Command = Messages.TestData()
        Result = Messages.TestData()
        Command.method = 0
        Command.testNumber = 4
        Command.accDataNumber=self.acc_selector.currentIndex()+1
        if (Command.accDataNumber == 1):
            TTF = 30
        elif (Command.accDataNumber == 2):
            TTF = 12
        else:
            TTF = 0
        Cmd = Command.SerializeToString()
        self.UART.write(Cmd)
        received_len=self.UART.read(1).hex()
        bytes_read = self.UART.read(int(received_len,16))
        Result.ParseFromString(bytes_read)
        if(Command.accDataNumber==1 or Command.accDataNumber==2):
          if (Result.measuredValue[0]/1000 < TTF+3 and Result.measuredValue[0]/1000 > TTF-3 ):
              self.got_res_brs.append(f"Success, TTF={Result.measuredValue[0]/1000}")
          else:
              self.got_res_brs.append(f"Fail, TTF={Result.measuredValue[0]/1000}")
        elif (Command.accDataNumber==3 or Command.accDataNumber==4):
            if(Result.measuredValue[0]/1000==0):
                self.got_res_brs.append("Success, СНБП не сработала")
            else:
                self.got_res_brs.append("Fail, СНБП сработала")
        self.UART.close()

    def run_test4(self):
        Receiver=threading.Thread(target=self.Test4_handler)
        Receiver.start()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
