# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mocha.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import serial
from PyQt5 import QtCore, QtGui, QtWidgets
import STO_tests_V2_nanopb_pb2 as Messages
import numpy as np
from ctypes import *
import matplotlib.pyplot as plt
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1423, 1069)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.UART=serial.Serial('COM15',115200)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.read_acc_btn = QtWidgets.QPushButton(self.tab)
        self.read_acc_btn.setObjectName("read_acc_btn")
        self.gridLayout_2.addWidget(self.read_acc_btn, 1, 0, 1, 1)
        self.hui_v_jope = QtWidgets.QTextBrowser(self.tab)
        self.hui_v_jope.setObjectName("hui_v_jope")
        self.gridLayout_2.addWidget(self.hui_v_jope, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)
        self.read_acc_btn.clicked.connect(self.read_acc)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.read_acc_btn.setText(_translate("MainWindow", "Въебать по маленькой"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
    def read_acc(self):
        try:
            self.UART.open()
        except:
            self.UART.close()
            self.UART.open()
        result_string=""
        Command = Messages.TestData()
        Result1 = Messages.TestData()
        Result2 = Messages.TestData()
        Result3 = Messages.TestData()
        Result4 = Messages.TestData()
        Result5 = Messages.TestData()
        Result6 = Messages.TestData()
        Command.method = 0
        Command.testNumber = 0xAB
        '''frames=['157d62b00605ab5fc', '210140007800fa02', '222601f40505b400', '23be00a004020000', '2400140000000000',
         '250000130000000e', '2600000027000000', '27220000001d0000', '280018000186a000', '291e848000000000',
         '2a00000000002625', '2ba0002f9b80003d', '2ccc500044aa2000', '2d00001d00000018', '2e0000000e000000',
         '2f09000000000000', '2000000000000000', '2100000000000000', '2200000000000000', '2300000000000000',
         '2400000000000000', '2500000000000000', '2600000000000000', '2700000000000000', '2800000000000000',
         '2900000000000000', '2a00000000000000', '2b00000000000000', '2c00000000000000', '2d00000000000000',
         '2e00000000000000', '2f00000000000000', '2000000000000000', '2100000000000000', '2200000000000000',
         '2300000000000000', '2400000000000000', '2500000000000000', '2600000000000000', '2700000000000000',
         '2800000000000000', '2900000000000000', '2a00000000000000', '2b00000000000000', '2c00000000000000',
         '2d00000000000000', '2e00000000000000', '2f00000000000000', '2000000000000000', '2100000000000000',
         '2200000000000000', '2300000000000000', '2400000000000000', '2500000000000000', '2600000000000000',
         '2700000000000000', '2800000000000000', '2900000000000000', '2a00000000000000', '2b00000000000000',
         '2c00000000000000', '2d00000000000000', '2e00000000000000', '2f00000000000000', '2000000000000000',
         '2100000000000000', '2200000000000000', '2300000000000000', '2400000000000000', '2500000000000000',
         '2600000000000000', '2700000000000000', '2800000000000000', '2900000000000000', '2a00000000000000',
         '2b00000000000000', '2c00000000000000', '2d00000000000000', '2e00000000000000', '2f00000000000000',
         '2000000000000000', '2100000000000000', '2200000000000000', '2300000000000000', '2400000000000000',
         '2500000000000000', '2600000000000000', '2700000000000000', '2800000000000000', '2900000000000000',
         '2a00000000000000', '2b00000000000000', '2c00000000000000', '2d00000000000000', '2e00000000000000',
         '2f00000000000000', '2000000000000000', '2100000000000000', '2200000000000000', '2300000000000000',
         '2400000000000000', '2500000000000000', '2600000000000000', '2700000000000000', '2800000000000000',
         '2900000000000000', '2a00000000000000', '2b00000000000000', '2c00000000000000', '2d00000000000000',
         '2e00000000000000', '2f00000000000000', '2000000000000000', '2100000000000000', '2200000000000000',
         '2300000000000000', '2400000000000000', '2500000000000000', '2600000000000000', '2700000000000000',
         '2800000000000000', '2900000000000000', '2a00000000000000', '2b00000000000000', '2c00000000000000',
         '2d00000000000000', '2e00000000000000', '2f00000000000000', '2000000000000000', '2100000000000000',
         '2200000000000000', '2300000000000000', '2400000000000000', '2500000000000000', '2600000000000000',
         '27002e0100000000', '2800000000000800', '2900008250000000', '2a06000000000000', '2b00000000000000',
         '2c00000000000000', '2d00000000fefefe', '2efe1e4400000000', '2f000001000000a5', '20a5a5a5a5a5a5a5',
         '21a5a5a5a5a5a5a5', '22a5a5a5a5a5a5a5', '23a5a5a5a5a5a5a5', '24a5a5a5a5a5a5a5', '25a5a5a5a5a5a5a5',
         '26a5a5a5a5a5a5a5', '27a5a5a5a5a5a5a5', '28a5a5a5a5a5a5a5', '29a5a5a5a5a5a5a5', '2aa5a5a5a5a5a5a5',
         '2ba5a5a5a5a5a5a5', '2ca5a5a5a5a5a5a5', '2da5a5a5a5a5a5a5', '2ea5a5a5a5a5a5a5', '2fa5a5a5a5a5a5a5',
         '20a5a5a5a5a5a5a5', '21a5a5a5a5a5a5a5', '22a5a5a5a5a5a5a5', '23a5a5a5a5a5a5a5', '24a5a5a5a5a5a5a5',
         '25a5a5a5a5a5a5a5', '26a5a5a5a5a5a5a5', '27a5a5a5a5a5a5a5', '28a5a5a5a5a5a5a5', '29a5a5a5a5a5a5a5',
         '2aa5a5a5a5a5a5a5', '2ba5a5a5a5a5a5a5', '2ca5a5a5a5a5a5a5', '2da5a5a5a5a5a5a5', '2ea5a5a5a5a5a5a5',
         '2fa5a5a5a5a5a5a5', '20a5a5a5a5a5a5a5', '21a5a5a5a5a5a5a5', '22a5a5a5a5a5a5a5', '23a5a5a5a5a5a5a5',
         '24a5a5a5a5a5a5a5', '2500000000902e00', '262058290120582b', '27012000000000a5', '28a5a5a5a5a5a5a5',
         '29a5a5a5a5fdffff', '2aff0000001004ed', '2b00e01000002002', '2c00000001000000', '2db5c20108f0c201',
         '2e08000000010100', '2f000000000000ff', '20000000ff000000', '21000000009ba702', '2208020000000fa5',
         '23a5a50000000023', '2400000000000000', '2500000200000000', '2600000000ffa5a5', '27a5a5a5a5a5a5a5',
         '28a5a5a5a5a5a5']
        '''
        frames=[]
        Command = Command.SerializeToString()
        self.UART.write(Command)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result1.ParseFromString(bytes_read)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result2.ParseFromString(bytes_read)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result3.ParseFromString(bytes_read)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result4.ParseFromString(bytes_read)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result5.ParseFromString(bytes_read)
        received_len = self.UART.read(2).hex()
        bytes_read = self.UART.read(int(received_len, 16))
        Result6.ParseFromString(bytes_read)
        print('big dick 13')
        frames.append(Result1.frame[1].data.hex())
        for i in range(0,40):
            frames.append(Result2.frame[i].data.hex())
        for i in range(40):
            frames.append(Result3.frame[i].data.hex())
        for i in range(40):
            frames.append(Result4.frame[i].data.hex())
        for i in range (40):
            frames.append(Result5.frame[i].data.hex())
        for i in range(40):
            frames.append(Result6.frame[i].data.hex())

        print(frames)
        frames[0]=frames[0][10:]
        for i in range(1,len(frames)):
            frames[i]=frames[i][2:]
        print(frames)
        for i in range(len(frames)):
            result_string+=frames[i]
        res1= [(hex(int(result_string[i:i + 4], 16))) for i in range(0, len(result_string), 4)]
        print(f"res1:{res1}")
        res=[(c_int16(int(result_string[i:i + 4],16))).value for i in range(0, len(result_string), 4)]
        print(res)
        for i in range(len(res)):
            res[i]=round(res[i]/327.36,3)
        print(res,max(res))
        acc_x=np.arange(-50,300.5,0.5)
        plt.plot(acc_x,res)
        plt.show()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())